<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>gpilab.com</title><link href="http://gpilab.com/" rel="alternate"></link><link href="http://gpilab.com/feeds/all.atom.xml" rel="self"></link><id>http://gpilab.com/</id><updated>2020-03-06T00:00:00-07:00</updated><subtitle>Graphical Programming Interface</subtitle><entry><title>Recent Updates to GPI</title><link href="http://gpilab.com/2020/03/recent-updates-to-gpi/" rel="alternate"></link><published>2020-03-06T00:00:00-07:00</published><updated>2020-03-06T00:00:00-07:00</updated><author><name>Daniel Borup &lt;borup.daniel@mayo.edu&gt;</name></author><id>tag:gpilab.com,2020-03-06:/2020/03/recent-updates-to-gpi/</id><summary type="html">&lt;h3&gt;Interested in trying GPI? It's easier than ever to get started!&lt;/h3&gt;
&lt;p&gt;We've been making some major behind-the-scenes upgrades to GPI in recent months! We've added the ability to run GPI natively on Windows, squashed a few bugs, and streamlined the installation process to help new users get up and running …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;Interested in trying GPI? It's easier than ever to get started!&lt;/h3&gt;
&lt;p&gt;We've been making some major behind-the-scenes upgrades to GPI in recent months! We've added the ability to run GPI natively on Windows, squashed a few bugs, and streamlined the installation process to help new users get up and running quickly. All of this means a smoother experience for new and existing users alike.&lt;/p&gt;
&lt;p&gt;GPI can be used by anyone from a new Python coder to an experienced MRI reconstruction developer — and we want everyone to be able to install and run GPI without hassle. To facilitate this, we'll be supporting two methods of GPI installation going forward: one using the graphical "Anaconda Navigator", and the other using the command line. GPI will look and feel exactly the same regardless of which method you choose. For more details, visit the newly-updated &lt;a href="http://gpilab.com/downloads/"&gt;Install GPI&lt;/a&gt; page.&lt;/p&gt;
&lt;p&gt;Once you've installed GPI and the core nodes, you'll want to keep them up to date as updates are released frequently. You can do this through conda (see the install page for details), or using GPI itself! Just look under:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Mac&lt;/strong&gt;: GPI &amp;gt; Search For Updates&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Linux/Windows&lt;/strong&gt;: Help &amp;gt; Search For Updates&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h3&gt;Contributing to GPI&lt;/h3&gt;
&lt;p&gt;We value community contributions highly and hope you'll consider pitching in to make GPI even better! All of our development work is carried out at &lt;a href="www.github.com/gpilab"&gt;www.github.com/gpilab&lt;/a&gt;. Feel free to have a look at the code, start a fork of any of the repositories, and communicate with us via &lt;code&gt;Issues&lt;/code&gt; for any bugs, feature requests, or general thoughts. We already have more feature ideas than we have time to implement them, so we'd love your help!&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>GPI version 1.1 has arrived!</title><link href="http://gpilab.com/2019/08/gpi-version-11-has-arrived/" rel="alternate"></link><published>2019-08-14T00:00:00-07:00</published><updated>2019-08-14T00:00:00-07:00</updated><author><name>Daniel Borup &lt;borup.daniel@mayo.edu&gt;</name></author><id>tag:gpilab.com,2019-08-14:/2019/08/gpi-version-11-has-arrived/</id><summary type="html">&lt;h3&gt;A new release is here!&lt;/h3&gt;
&lt;p&gt;GPI version 1.1 is now available, along with version 2.0 of the GPI core nodes. For the most part, the look and feel of GPI should remain unchanged to the end user. But we’ve made some significant improvements under the hood that …&lt;/p&gt;</summary><content type="html">&lt;h3&gt;A new release is here!&lt;/h3&gt;
&lt;p&gt;GPI version 1.1 is now available, along with version 2.0 of the GPI core nodes. For the most part, the look and feel of GPI should remain unchanged to the end user. But we’ve made some significant improvements under the hood that we hope will make GPI easier for users, developers, and maintainers going forward. Below you'll find a description of the major changes, upgrade process, and a list of changes to the core nodes.&lt;/p&gt;
&lt;p&gt;As of this version, the recommended installation method is to use the installation script. All changes listed below will be accounted for by default when installing with the script, so if you're a new user you can just sit back, relax, and enjoy GPI.&lt;/p&gt;
&lt;h2&gt;Major changes&lt;/h2&gt;
&lt;p&gt;Two main changes come as part of this release.&lt;/p&gt;
&lt;h3&gt;Qt5&lt;/h3&gt;
&lt;p&gt;We've added support for Qt5 thanks to a contribution from community member Gregory Lee. Support is now provided using the QtPy wrapper, which is technically compatible with Qt4 — however, because Qt4 has been end-of-life for some time now, we're no longer supporting it in GPI.&lt;/p&gt;
&lt;p&gt;For most users, this change will show up as nothing more than a slightly different look to menus. However, if you were developing your own nodes and making use of Qt libraries imported from GPI, you may need to update your import statements to reference the new "QtWidgets" module -- for an example, see the changes made to the core nodes library as part of this update (https://github.com/gpilab/core-nodes/pull/10).&lt;/p&gt;
&lt;h3&gt;Conda-forge packaging&lt;/h3&gt;
&lt;p&gt;GPI, and the core nodes, are now packaged on conda-forge! This is another "under the hood" change for most users, but one that we're very excited about as it will make our development, testing, and release process much more streamlined and reliable. Since GPI already relied on numerous packages from conda-forge, it made sense to add our work to this community ecosystem, too.&lt;/p&gt;
&lt;p&gt;If you're a new user or otherwise installing GPI from scratch, this change should be completely invisible. &lt;/p&gt;
&lt;p&gt;If you want to upgrade an existing GPI installation, there are a few minor differences. First, the core nodes are now packaged and distributed under the name &lt;code&gt;gpi_core&lt;/code&gt;. At the surface level, this means these nodes will appear under the heading &lt;code&gt;gpi_core&lt;/code&gt; in the node selection menu. More critically, if you've written nodes that import or include modules from the core library, you'll need to change those import/include statements to reference &lt;code&gt;gpi_core&lt;/code&gt; instead of &lt;code&gt;core&lt;/code&gt; after upgrading.&lt;/p&gt;
&lt;h2&gt;Upgrading&lt;/h2&gt;
&lt;p&gt;To upgrade an existing GPI installation, you can take the following simple steps.&lt;/p&gt;
&lt;p&gt;1) Remove the &lt;code&gt;gpi&lt;/code&gt; channel from your conda configuration, as it's no longer necessary. You can do this directly by modifying &lt;code&gt;~/.condarc&lt;/code&gt;. While various configurations may work, the &lt;code&gt;.condarc&lt;/code&gt; provided with a fresh GPI install is the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;channels&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;conda&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;forge&lt;/span&gt;
  &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="k"&gt;defaults&lt;/span&gt;
&lt;span class="n"&gt;channel_priority&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="k"&gt;strict&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This sets &lt;code&gt;conda-forge&lt;/code&gt; and &lt;code&gt;defaults&lt;/code&gt; as the two channels to search (in that order) and sets "strict channel priority" as currently recommended for in the conda-forge ecosystem.&lt;/p&gt;
&lt;p&gt;2) Make a backup copy of any node libraries you may use outside of the GPI core nodes, as you may need to modify your nodes slightly to work with v1.1.&lt;/p&gt;
&lt;p&gt;3) Run &lt;code&gt;conda update -n base conda&lt;/code&gt; to get the latest version of the package manager itself.&lt;/p&gt;
&lt;p&gt;4) Install GPI and the core nodes. If you use conda exclusively for GPI, you can upgrade inside your existing gpi environment with:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="n"&gt;gpi&lt;/span&gt;
&lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gpi&lt;/span&gt; &lt;span class="n"&gt;gpi_core&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or, if you prefer a more conservative approach, make a new environment for GPI 1.1 and install there:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="k"&gt;create&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;new&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;env&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;gpi&lt;/span&gt; &lt;span class="n"&gt;gpi_core&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;5) Make any necessary changes to other node libraries as described above.&lt;/p&gt;
&lt;p&gt;6) Get started with GPI 1.1 -- and consider helping us make it even better!&lt;/p&gt;
&lt;h2&gt;Core Node Library Changes&lt;/h2&gt;
&lt;p&gt;Minor changes to the core nodes themselves include two new nodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Int_Math&lt;/code&gt;, which works just like &lt;code&gt;Float_Math&lt;/code&gt; for integer values.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Switch&lt;/code&gt;, which allows you to toggle between a left and right input without re-drawing connections.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;And some modifications to existing nodes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;In the &lt;code&gt;Collapse&lt;/code&gt; node, you can now use the "non-zero" option for collapsing in a single dimension, not just with "collapse all" selected&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;shapes&lt;/code&gt; node now allows for the generation of complex-valued noise, as well as repeatable noise using a user-specified seed.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Calc_101&lt;/code&gt; now allows for more granular control over the scheme used for derivatives and integrals.&lt;/li&gt;
&lt;li&gt;Many trigonometric functions now have a "cycles" option in addition to degrees and radians.&lt;/li&gt;
&lt;li&gt;Nodes with multiple functions will provide more information on the canvas about which function is active.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Development of both the GPI framework and core nodes library is ongoing, and we welcome community contributions of any kind!&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Linux on Windows 10 with support for GPI: An Easy way for reading and converting Philips MR rawdata</title><link href="http://gpilab.com/2019/07/linux-on-windows-10-with-support-for-gpi-an-easy-way-for-reading-and-converting-philips-mr-rawdata/" rel="alternate"></link><published>2019-07-23T00:00:00-07:00</published><updated>2019-07-23T00:00:00-07:00</updated><author><name>Sandeep Ganji &lt;sandeep.ganji@philips.com&gt;</name></author><id>tag:gpilab.com,2019-07-23:/2019/07/linux-on-windows-10-with-support-for-gpi-an-easy-way-for-reading-and-converting-philips-mr-rawdata/</id><summary type="html">&lt;h1&gt;Linux on Windows 10 with support for GPI: An Easy way for reading and converting Philips MR rawdata&lt;/h1&gt;
&lt;p&gt;(Note: a video version of this tutorial is available at &lt;a href="https://www.youtube.com/watch?v=LWMhKDcEce0&amp;amp;feature=youtu.be"&gt;this link&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The installation of a Linux Distro on a Windows 10 operating system is outlined using Windows Subsystem for Linux (WSL …&lt;/p&gt;</summary><content type="html">&lt;h1&gt;Linux on Windows 10 with support for GPI: An Easy way for reading and converting Philips MR rawdata&lt;/h1&gt;
&lt;p&gt;(Note: a video version of this tutorial is available at &lt;a href="https://www.youtube.com/watch?v=LWMhKDcEce0&amp;amp;feature=youtu.be"&gt;this link&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;The installation of a Linux Distro on a Windows 10 operating system is outlined using Windows Subsystem for Linux (WSL) feature. Instructions on how to install GPI (Graphical Programming Interface) in the Linux Disrto under Windows 10 and how to convert the proprietary and standard Philips MR rawdata, imaging and spectroscopy data to NumPy data are shown below.&lt;/p&gt;
&lt;p&gt;Prerequisites and Installed Software list&lt;/p&gt;
&lt;hr&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Prerequisites&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows 10 Professional (Enterprise / Home) with version 1607 (OS build 14393) or above&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software installed on Windows 10:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Windows Subsystem for Linux (WSL)&lt;/li&gt;
&lt;li&gt;‘X’ windows server (such as Xming or MobaXterm or VcXsrv)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Software installed inside the Linux environment (under WSL):&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Conda (miniconda) – a cross-platform and cross-language package manager&lt;/li&gt;
&lt;li&gt;GPI (Graphical Programming Interface)&lt;/li&gt;
&lt;li&gt;ReadPhilips nodes and networks for GPI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Windows Subsystem for Linux (WSL)&lt;/h1&gt;
&lt;p&gt;Introduction to Windows Subsystem for Linux (WSL)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The Windows Subsystem for Linux (WSL) is a new Windows 10 feature (made available in a 2016 Windows update) that enables native Linux command-line tools directly on Windows, alongside the traditional Windows desktop and modern store apps. WSL is a collection of components that enables native Linux ELF64 binaries to run on Windows. It contains both user mode and kernel mode components.&lt;/p&gt;
&lt;p&gt;It is primarily comprised of:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;User mode session manager service that handles the Linux instance life cycle&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pico provider drivers (lxss.sys, lxcore.sys) that emulate a Linux kernel by translating Linux syscalls&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Pico processes that host the unmodified user mode Linux (e.g. /bin/bash)&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;By placing unmodified Linux binaries in Pico processes, thus enabling Linux system calls to be directed into the Windows kernel. The lxss.sys and lxcore.sys drivers translate the Linux system calls into NT APIs and emulate the Linux kernel on Windows.&lt;/p&gt;
&lt;p&gt;In May 2019, Microsoft announced the newest architecture for the Windows Subsystem for Linux (WSL2). It will be released as a Windows Insider Preview in late-2019 and later will be incorporated into native Windows build in the future releases. (Source:&lt;a href="https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/"&gt;https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/&lt;/a&gt;,
&lt;a href="https://devblogs.microsoft.com/commandline/announcing-wsl-2/"&gt;https://devblogs.microsoft.com/commandline/announcing-wsl-2/&lt;/a&gt; and &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/wsl2-install"&gt;https://docs.microsoft.com/en-us/windows/wsl/wsl2-install&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;WSL depends on the Windows 10 Build version&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;It is important to understand that Windows adds, updates, and removes features with each new major update (version or build number change). WSL was first introduced in Windows 10 version 1607 (OS build 14393, first made available on 2016-08-02). While the more recent version of Windows 10 is 1903 (OS build 18362, released on 2019-05-21).&lt;/p&gt;
&lt;p&gt;Checking Windows 10 Build version&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;To confirm your current Windows version, follow the step below&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Method 1: Using “winver” command&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Press “Windows Key” + “R” simultaneously&lt;/p&gt;
&lt;p&gt;Then type “winver” and hit “Enter Key” and note the output&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_1.png"&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Method 2: Using “About PC” functionality&lt;/strong&gt; &lt;/p&gt;
&lt;p&gt;Press “Windows Key”, type “About your PC” in the search space and hit
“Enter Key”.&lt;/p&gt;
&lt;p&gt;A window with your system information will open showing you the Windows Edition and version number.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_2.png"&gt;&lt;/p&gt;
&lt;p&gt;Updating to the latest Windows Version&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Press “Windows Key”, type “Check for Updates” in the search space and hit “Enter Key”.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_3.png"&gt;&lt;/p&gt;
&lt;p&gt;Checking if the WSL is enabled&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;First check if the WSL is already enabled in your Windows operating system&lt;/p&gt;
&lt;p&gt;Step 1: Open Powershell as “Administrator” (right-click on the icon and select option “Run as Administrator”)&lt;/p&gt;
&lt;p&gt;Step 2: Run the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;DISM&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;online&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;features&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="k"&gt;table&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="k"&gt;Select&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;String&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Pattern&lt;/span&gt; &lt;span class="ss"&gt;&amp;quot;Linux&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If is output shows “&lt;strong&gt;Microsoft-Windows-Subsystem-Linux | Enabled&lt;/strong&gt;”, then WSL is &lt;strong&gt;enabled&lt;/strong&gt; in Windows.&lt;/p&gt;
&lt;p&gt;If is output shows “&lt;strong&gt;Microsoft-Windows-Subsystem-Linux | Disabled&lt;/strong&gt;”, then WSL is &lt;strong&gt;not enabled&lt;/strong&gt; in the Windows and it must be enabled
manually. Follow the steps below to enable the WSL in Windows.&lt;/p&gt;
&lt;p&gt;Method 1: Enabling WSL using PowerShell with Administrator rights&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Step 1: Open PowerShell as “Administrator”&lt;/p&gt;
&lt;p&gt;Step 2: Run the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;Enable&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;WindowsOptionalFeature&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Online&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;FeatureName&lt;/span&gt; &lt;span class="n"&gt;Microsoft&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Windows&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Subsystem&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Linux&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_4.png"&gt;&lt;/p&gt;
&lt;p&gt;Step 3: Wait for the process to end and Restart the computer when prompted&lt;/p&gt;
&lt;p&gt;Method 2: Enabling WSL using Windows Features (GUI)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Step 1: Open the advanced Windows Feature list&lt;/p&gt;
&lt;p&gt;Step 2: Go to “&lt;strong&gt;Control Panel&lt;/strong&gt;”, then “&lt;strong&gt;Programs and Features&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;Step 3: Select “&lt;strong&gt;Turn Windows features on or off&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;(Note: If you don’t have Administrative rights on the PC, then try the above mentioned PowerShell method or contact your system administrator or IT)&lt;/p&gt;
&lt;p&gt;Step 4: Enable “&lt;strong&gt;Windows Subsystem for Linux&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_5.png"&gt;
&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_6.png"&gt;&lt;/p&gt;
&lt;p&gt;Step 5: Wait for the process to end and Restart the computer when prompted&lt;/p&gt;
&lt;h1&gt;Installing X Server software (on Windows 10)&lt;/h1&gt;
&lt;p&gt;The previous steps give access to only command line version of Ubuntu (or whatever distro you installed) natively on Windows. It can be used like most other apps in Windows. However, in order to run GUI applications in WSL, you need to first install an X Server on your
Windows machine. Microsoft Windows is not shipped with support for X server, but many third-party implementations exist, such as &lt;strong&gt;Cygwin/X&lt;/strong&gt; or &lt;strong&gt;Xming&lt;/strong&gt; or &lt;strong&gt;MobaXterm&lt;/strong&gt; or &lt;strong&gt;VcXsrv&lt;/strong&gt; (free version), and proprietary products such as &lt;strong&gt;Exceed&lt;/strong&gt;, &lt;strong&gt;MKS X/Server&lt;/strong&gt;, &lt;strong&gt;Reflection X&lt;/strong&gt;, &lt;strong&gt;X-Win32&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Step 1: Download Xming from &lt;a href="https://sourceforge.net/projects/xming/"&gt;https://sourceforge.net/projects/xming/&lt;/a&gt; on to your Windows 10 machine&lt;/p&gt;
&lt;p&gt;Step 2: Install the Xming by running “&lt;strong&gt;&lt;em&gt;Xming-6-9-0-31-setup.exe&lt;/em&gt;&lt;/strong&gt;” file&lt;/p&gt;
&lt;p&gt;Step 3: Reboot the system and after rebooting start the Xming software. Confirm that Xming is running in Windows Taskbar (will show up as &lt;strong&gt;Xming Server:0.0&lt;/strong&gt;, when you hover mouse on the icon).&lt;/p&gt;
&lt;h1&gt;Installing Linux Distro of your choice&lt;/h1&gt;
&lt;p&gt;Download and install your favorite flavor of Linux distribution from the Windows Store.&lt;/p&gt;
&lt;p&gt;Step 1: Open the Windows Store, search (top right corner) for “&lt;strong&gt;Linux&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;Step 2: Click on “&lt;strong&gt;Get the apps&lt;/strong&gt;”&lt;/p&gt;
&lt;p&gt;Step 3: Download the Linux distribution you prefer for your work (Ubuntu 18.04 version is recommended if you do not have a reason to pick another distribution. If you choose a different Linux distribution, some of the following instructions may not completely apply)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_7.png"&gt;&lt;/p&gt;
&lt;p&gt;If for some reason, the network you’re connected does not allow access to “Microsoft Store”, then you can manually download the Linux distro’s at &lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual"&gt;https://docs.microsoft.com/en-us/windows/wsl/install-manual&lt;/a&gt; (e.g. Ubuntu 18.01 version is &lt;em&gt;CanonicalGroupLimited.Ubuntu18.04onWindows_1804.2018.817.0_x64__79rhkp1fndgsc&lt;/em&gt;).&lt;/p&gt;
&lt;h1&gt;Post Installation Setup (inside Linux)&lt;/h1&gt;
&lt;p&gt;Step 1: Launch your distribution of Linux (via Start Menu or Microsoft Store)&lt;/p&gt;
&lt;p&gt;Step 2: Wait for installation to finish, until it shows the following window&lt;/p&gt;
&lt;p&gt;Step 3: When prompted create a &lt;strong&gt;username&lt;/strong&gt; and &lt;strong&gt;password&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_8.png"&gt;&lt;/p&gt;
&lt;p&gt;Step 4: Check the Linux version installed (type into the terminal)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cat&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;etc&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;release&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;For example, output for Ubuntu 18.04 Linux distro is shown below&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_9.png"&gt;&lt;/p&gt;
&lt;p&gt;Step 5: Update the system with latest distro repositories by entering the following commands&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Step 6: Get the wget and unzip packages by using following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;unzip&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Step 7: Get the build-essential tools (The build-essential package contains important development tools including the gcc compiler)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Step 8: Get latest ca-certificates&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;certificates&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;GPI installation and testing&lt;/h1&gt;
&lt;p&gt;In order to install GPI, first you need to get the installation script from the GPI website (&lt;a href="http://gpilab.com/downloads/"&gt;http://gpilab.com/downloads/&lt;/a&gt;) and then run the script in the Linux distro (this case it is Ubuntu) installed using the steps above.&lt;/p&gt;
&lt;p&gt;Obtaining the GPI install script&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Step 1: Launch your distribution of Linux (via Start Menu)&lt;/p&gt;
&lt;p&gt;Step 2: Get the latest GPI installation script from
&lt;a href="http://gpilab.com/downloads/"&gt;http://gpilab.com/downloads/&lt;/a&gt; using&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;githubusercontent&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gpilab&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;conda&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;distro&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;master&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;GPI_Install_Latest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Note: this script will work only for Linux distros and macOS version 10.09 or above)&lt;/p&gt;
&lt;p&gt;Installing GPI&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Step 1: Elevate the privileges of “GPI_Install_Latest.sh” shell script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="n"&gt;GPI_Install_Latest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Step 2: Execute the shell script “GPI_Install_Latest.sh”&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;GPI_Install_Latest&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sh&lt;/span&gt;   &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;gpi_stack&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(Note: if you need help, you see the help text by ./GPI_Install_Latest.sh  -h)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_10.png"&gt;&lt;/p&gt;
&lt;p&gt;Step 3: If the GPI install is successful you will get the following
message in the terminal&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_11.png"&gt;&lt;/p&gt;
&lt;p&gt;Step 4: Close the WSL terminal (by using exit command)&lt;/p&gt;
&lt;p&gt;Testing the GPI GUI&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The main GPI workspace is the canvas, which can be loaded by running the following commands. It gives access to the core gpi nodes and can be used to build algorithms. Make sure the Xming server or your preferred Windows X Server is running.&lt;/p&gt;
&lt;p&gt;Launch your distribution of Linux (via Start Menu). Run the following commands in the Ubuntu Terminal (see the screenshot below that shows the outputs)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="n"&gt;gpi&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;gpi&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_12.png"&gt;
&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_13.png"&gt;&lt;/p&gt;
&lt;h1&gt;Obtaining and configuring the readPhilips nodes&lt;/h1&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The “&lt;em&gt;readPhilips&lt;/em&gt;” nodes are GPI nodes that are binary distributions for reading Philips MR data. Current supported formats include rawdata (LAB/RAW/SIN, DATA/LIST, CPX), and imaging &amp;amp; spectroscopy data (e.g. DICOM, par/rec, sdat/spar). For more information visit
&lt;a href="https://github.com/gpilab/philips-data-reader"&gt;https://github.com/gpilab/philips-data-reader&lt;/a&gt;. The below steps assume a working GPI already exists and has all the gpi-core-nodes are
installed.&lt;/p&gt;
&lt;p&gt;Installation of the nodes in GPI&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Download the latest release binary (pre-compiled) files corresponding to the installation of GPI platform (Linux or macOS X) to the default GPI library directory (or a directory that is in your LIB_PATH, as shown in the configuration documentation), unzip and restart GPI.&lt;/p&gt;
&lt;p&gt;For example, from the Ubuntu terminal&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="cm"&gt;/**user**/&lt;/span&gt;&lt;span class="n"&gt;gpi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(here &lt;strong&gt;user&lt;/strong&gt; is the name of your user directory)&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gpilab&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;philips&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;data&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;reader&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;releases&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;v1&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;ReadPhilips&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GPI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Python36&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;
&lt;span class="n"&gt;unzip&lt;/span&gt; &lt;span class="n"&gt;ReadPhilips&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;GPI&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Linux&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;Python36&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;07&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;zip&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;(this will unzip a folder called ‘&lt;em&gt;philips&lt;/em&gt;’ in /home/&lt;strong&gt;user&lt;/strong&gt;/gpi, precise naming here is important for GPI to load the modules properly. Note that there may be new readphilips nodes or networks in the future)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_14.png"&gt;&lt;/p&gt;
&lt;p&gt;Confirming the read philips nodes in GPI canvas&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;To confirm that the nodes are installed and working, you can do the following simple test.&lt;/p&gt;
&lt;p&gt;Step 1: Start the X server application (Xming in this case)&lt;/p&gt;
&lt;p&gt;Step 2: Start the Linux (Ubuntu 18.04 in this case) terminal and run the following commands in the terminal window&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="n"&gt;gpi&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;span class="n"&gt;gpi&lt;/span&gt; &lt;span class="o"&gt;&amp;amp;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Step 3: Once the GPI canvas is open, “Right Click” on the canvas to open a menu and it should show “philips” option under the “core”. Any other GPI libraries you create or install will also show up here.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_15.png"&gt;&lt;/p&gt;
&lt;p&gt;Step 4: If you do not see the “philips” option, then in the Menu options at the top, click on “Config” and then click on “Scan for New Nodes” and then check the menu again for “philips” option&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_16.png"&gt;&lt;/p&gt;
&lt;h1&gt;Data conversion networks&lt;/h1&gt;
&lt;p&gt;The latest GPI network files (*.net) for converting reading and converting the Philips MR data from GitHub are included in the
readphilips nodes zip file (inside the \~/gpi/philips folder).&lt;/p&gt;
&lt;p&gt;readPhilips_Imaging_raw.net&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This network is designed to read and convert the Philips MR imaging data (LAB/RAW/SIN, DATA/LIST, CPX) to NumPy data format (*.npy files) and header information into a Python dictionary (saved on-disk as a *.pickle file).&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_17.png"&gt;&lt;/p&gt;
&lt;p&gt;readPhilips_Spectro_raw.net&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;This network is designed to read and convert the Philips MR spectroscopy data (LAB/RAW/SIN, DATA/LIST, CPX) to NumPy data format (*.npy files) and header information into a Python dictionary (saved on-disk as a *.pickle file).&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_18.png"&gt;&lt;/p&gt;
&lt;h1&gt;Running the data conversion networks and validating the output&lt;/h1&gt;
&lt;p&gt;Philips raw data conversion using Linux command line&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;The rawdata that needs to be converted can be anywhere in the system (host or in the linux). For WSL, all the drives can be accessed by /mnt directory inside the Linux environment. Once you have the location of the data on the windows you can use that as a path in the Linux terminal.&lt;/p&gt;
&lt;p&gt;Step 1: Start the X server application (Xming in this case)&lt;/p&gt;
&lt;p&gt;Step 2: Start the Linux (in this case Ubuntu 18.04) terminal and run the following commands in the terminal window&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;conda&lt;/span&gt; &lt;span class="n"&gt;activate&lt;/span&gt; &lt;span class="n"&gt;gpi&lt;/span&gt;
&lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;DISPLAY&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Step 3: For imaging raw data you can use the readPhilips_Imaging_raw.net&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gpi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sganji&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gpi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;philips&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;readPhilips_Imaging_raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="c1"&gt;--nogui -s filename:/mnt/drive_letter/path_of_rawdata_files/Filename.raw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Or&lt;/p&gt;
&lt;p&gt;Step 3: For spectroscopy raw data you can use the readPhilips_Spectro_raw.net&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gpi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sganji&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gpi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;philips&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;readPhilips_Spectro_raw&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;net&lt;/span&gt; &lt;span class="c1"&gt;--nogui -s filename:/mnt/drive_letter/path_of_rawdata_files/Filename.raw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Validating the output NumPy files (checking the dimensions, and labels)&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;One can validate the output NumPy files using a python IDE. Load the data using NumPy package.&lt;/p&gt;
&lt;p&gt;For example, using Spyder (&lt;a href="https://www.spyder-ide.org/"&gt;https://www.spyder-ide.org/&lt;/a&gt;) one can check the output files of a mDixon dataset.&lt;/p&gt;
&lt;p&gt;Input files
20190425_155716_mDixon_3D_2echo.raw
20190425_155716_mDixon_3D_2echo.lab
20190425_155716_mDixon_3D_2echo.sin&lt;/p&gt;
&lt;p&gt;Script&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;gpi&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;home&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sganji&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;gpi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;philips&lt;/span&gt;&lt;span class="cm"&gt;/**readPhilips_Imaging_raw.net** --nogui -s filename:/mnt/v/zData_WorkingON01/20190425_SG_ProstatePhan/RAWDATA/20190425_155716_mDixon_3D_2echo.raw&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_19.png"&gt;&lt;/p&gt;
&lt;p&gt;Output files
20190425_155716_mDixon_3D_2echo__data.npy
-   Data is a NumPy array with dimensions [27 x 2 x 2 x 32 x 60 x 224]
20190425_155716_mDixon_3D_2echo__header.pickle
-   Contains header information in the form of a dictionary (from both &lt;em&gt;.lab and &lt;/em&gt;.sin files)
20190425_155716_mDixon_3D_2echo__noise.npy
-   Noise is a NumPy array with dimensions [27 x 19936] (this is 27 channels noise data)&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://gpilab.com/images/win10/GPIonWin10_20.png"&gt;&lt;/p&gt;
&lt;h1&gt;Known issues and bugs&lt;/h1&gt;
&lt;p&gt;GPI and its Philips networks are constantly being developed and improved by GPI and Philips team. If you find any bugs or have questions, please reach out to GPI team on the GitHub (use the issue tracker) or email Sandeep Ganji (&lt;a href="&amp;#109;&amp;#97;&amp;#105;&amp;#108;&amp;#116;&amp;#111;&amp;#58;&amp;#83;&amp;#97;&amp;#110;&amp;#100;&amp;#101;&amp;#101;&amp;#112;&amp;#46;&amp;#71;&amp;#97;&amp;#110;&amp;#106;&amp;#105;&amp;#64;&amp;#112;&amp;#104;&amp;#105;&amp;#108;&amp;#105;&amp;#112;&amp;#115;&amp;#46;&amp;#99;&amp;#111;&amp;#109;"&gt;&amp;#83;&amp;#97;&amp;#110;&amp;#100;&amp;#101;&amp;#101;&amp;#112;&amp;#46;&amp;#71;&amp;#97;&amp;#110;&amp;#106;&amp;#105;&amp;#64;&amp;#112;&amp;#104;&amp;#105;&amp;#108;&amp;#105;&amp;#112;&amp;#115;&amp;#46;&amp;#99;&amp;#111;&amp;#109;&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Multi-Nuclear MR Spectroscopy&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;We have noticed some failures when converting the multi-nuclear spectroscopy rawdata. So please check the output data, if it converts,
for dimensionality and continency. If the data fails to convert at all, please let us know and we can improve the functionality based on your inputs.&lt;/p&gt;
&lt;p&gt;Certificate issue when using wget&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;When downloading the installation script, if one gets the following ca-certificates error&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;certificate&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;githubusercontent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt; &lt;span class="k"&gt;is&lt;/span&gt; &lt;span class="n"&gt;not&lt;/span&gt; &lt;span class="n"&gt;trusted&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="n"&gt;The&lt;/span&gt; &lt;span class="n"&gt;certificate&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="err"&gt;‘&lt;/span&gt;&lt;span class="n"&gt;raw&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;githubusercontent&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="err"&gt;’&lt;/span&gt; &lt;span class="n"&gt;hasn&lt;/span&gt;&lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;got&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;known&lt;/span&gt; &lt;span class="n"&gt;issuer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;They should install the latest &lt;strong&gt;ca-certificates&lt;/strong&gt; using the following command&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;ca&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;certificates&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Atypical sequence data&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;For raw data from a newly development sequence, where the dimensions are either improbably labelled or new reconstruction labels were created, then the above conversion may fail.&lt;/p&gt;
&lt;h2&gt;Author&lt;/h2&gt;
&lt;p&gt;Sandeep Ganji
Contributions from Daniel Borup and Ashley Anderson&lt;/p&gt;
&lt;h1&gt;Legal Disclaimer&lt;/h1&gt;
&lt;p&gt;THE SOFTWARE AND INSTRUCTIONS ARE PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;
&lt;h1&gt;References and Sources&lt;/h1&gt;
&lt;p&gt;&lt;em&gt;Linux on Windows&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href="https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/"&gt;https://blogs.msdn.microsoft.com/wsl/2016/04/22/windows-subsystem-for-linux-overview/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/about"&gt;https://docs.microsoft.com/en-us/windows/wsl/about&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10"&gt;https://docs.microsoft.com/en-us/windows/wsl/install-win10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://docs.microsoft.com/en-us/windows/wsl/install-manual"&gt;https://docs.microsoft.com/en-us/windows/wsl/install-manual&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://wsl-guide.org/en/latest/index.html"&gt;http://wsl-guide.org/en/latest/index.html&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;em&gt;GPI (Graphical Programming Interface)&lt;/em&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li&gt;http://gpilab.com/&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gpilab"&gt;https://github.com/gpilab&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://ismrm.github.io/mrhub/"&gt;https://ismrm.github.io/mrhub/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gpilab/philips-data-reader/releases"&gt;https://github.com/gpilab/philips-data-reader/releases&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</content><category term="posts"></category></entry><entry><title>ISMRM Demo: CS with BART in GPI</title><link href="http://gpilab.com/2019/05/ismrm-demo-cs-with-bart-in-gpi/" rel="alternate"></link><published>2019-05-07T08:59:00-07:00</published><updated>2019-05-07T08:59:00-07:00</updated><author><name>Ashley Anderson III &lt;aganders3@gmail.com&gt;</name></author><id>tag:gpilab.com,2019-05-07:/2019/05/ismrm-demo-cs-with-bart-in-gpi/</id><summary type="html">&lt;p&gt;As part of our GPI demo at at the &lt;a href="https://www.ismrm.org/19/program_files/WE21.htm"&gt;ISMRM 2019 Open-Source Software Tools for MR
Pulse Design, Simulation &amp;amp; Reconstruction Weekend
Course&lt;/a&gt;, we've revived an
example of BART working inside GPI. This example is intended to demonstrate the
flexibility and capabilities of GPI to integrate other packages. This demo also …&lt;/p&gt;</summary><content type="html">&lt;p&gt;As part of our GPI demo at at the &lt;a href="https://www.ismrm.org/19/program_files/WE21.htm"&gt;ISMRM 2019 Open-Source Software Tools for MR
Pulse Design, Simulation &amp;amp; Reconstruction Weekend
Course&lt;/a&gt;, we've revived an
example of BART working inside GPI. This example is intended to demonstrate the
flexibility and capabilities of GPI to integrate other packages. This demo also
highlights the use of GPI as a teaching tool; the example is based on &lt;a href="http://people.eecs.berkeley.edu/~mlustig/CS.html"&gt;this
example from Professor
Lustig&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Before getting started here, please see Nick's post on &lt;a href="http://gpilab.com/posts/2019-05-05-ISMRM-Demo-Primer.md"&gt;setting up GPI for the
ISMRM 2019 demo&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Download and Compile BART for GPI&lt;/h1&gt;
&lt;p&gt;&lt;a href="https://github.com/nckz/bart"&gt;BART for GPI&lt;/a&gt; is a fork of the &lt;a href="https://github.com/mrirecon/bart"&gt;BART
project&lt;/a&gt;. We concede this fork is out of
date, but it should suffice for a demonstation. Updating to a newer version
would be fairly trivial for someone familiar with both BART and GPI. Check
out Nick's &lt;em&gt;other&lt;/em&gt; post on &lt;a href="http://gpilab.com/posts/2016-02-16-GPI-and-the-BART.md"&gt;how BART was wrapped for use in
GPI&lt;/a&gt; if you're interested in
making this work.&lt;/p&gt;
&lt;p&gt;First, prepare your virtual machine for BART compilation:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;gcc&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;libfftw3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;liblapack&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;libpng&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're using the GPI ISMRM 2019 demo VM or AMI on EC2, the password for the
&lt;code&gt;ubuntu&lt;/code&gt; user is &lt;code&gt;gpilab&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;Next clone the BART for GPI fork into your &lt;code&gt;gpi&lt;/code&gt; library folder:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; git clone https://github.com/nckz/bart.git /home/&lt;span class="cp"&gt;${&lt;/span&gt;&lt;span class="n"&gt;USER&lt;/span&gt;&lt;span class="cp"&gt;}&lt;/span&gt;/gpi/bart
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Finally, build and test BART:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;gpi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bart&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bart&lt;/span&gt; &lt;span class="n"&gt;bench&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;If you're not working in the GPI VM, instead follow the instructions in the
BART for GPI README.&lt;/p&gt;
&lt;h1&gt;Launch GPI and Open the Example&lt;/h1&gt;
&lt;p&gt;Open GPI using the startup script or from a terminal. Right click anywhere on
the canvas and you should see a new Library in the menu called &lt;code&gt;bart&lt;/code&gt;. GPI
Libraries can contain both nodes and networks. Most BART functions should have
corresponding nodes here, but for now go ahead and select the &lt;code&gt;brain_cs_example
(net)&lt;/code&gt; near the bottom of the menu.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://gpilab.com/images/ismrm2019_bart/network_select.png" width="75%" class="center-block img-responsive"/&gt;&lt;/p&gt;
&lt;p&gt;The demo network will be loaded on the canvas, and the &lt;code&gt;DownloadFile&lt;/code&gt; node
should begin downloading the example data. This data (about 5 MB) will be
stored in a temporary file.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://gpilab.com/images/ismrm2019_bart/network_overview.png" width="75%" class="center-block img-responsive"/&gt;&lt;/p&gt;
&lt;h1&gt;Configure and Run the Network&lt;/h1&gt;
&lt;p&gt;Note the three &lt;code&gt;ReadMatlab&lt;/code&gt; nodes. Each is reading data from the same file (the
one downloaded by the &lt;code&gt;DownloadFile&lt;/code&gt; node) which contains several arrays.
Right-click on each of these nodes to open their node menus. In the menu you
will be able to select which array is output. From left to right we need to
select the sampling mask, the image, and the sampling pdf.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://gpilab.com/images/ismrm2019_bart/ReadMatlab_select.png" class="center-block img-responsive"/&gt;&lt;/p&gt;
&lt;p&gt;Right-click on a few of the &lt;code&gt;ImageDisplay&lt;/code&gt; nodes to probe the algorithm at
various points. The &lt;code&gt;ImageDisplay&lt;/code&gt; node labeled &lt;code&gt;CS Image&lt;/code&gt; is the
compressed-sensing reconstruction (though at this point it is only the inital
condition based on zero-filling).&lt;/p&gt;
&lt;p&gt;Open the &lt;code&gt;Iter&lt;/code&gt; node and click the "Start/Stop" button to begin the iterative
reconstruction. The &lt;code&gt;CS Image&lt;/code&gt; will be updated with each iteration, and you can
watch as the undersampling artifacts are removed by the wavelet-based
soft-thresholding constraint.&lt;/p&gt;
&lt;p&gt;&lt;img src="http://gpilab.com/images/ismrm2019_bart/cs_example_animated.gif" class="center-block img-responsive"/&gt;&lt;/p&gt;
&lt;p&gt;There you have it! Explore the rest of the BART tools in GPI and let us know if
you come up with any cool examples.&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>ISMRM Demo Primer</title><link href="http://gpilab.com/2019/05/ismrm-demo-primer/" rel="alternate"></link><published>2019-05-05T12:29:00-07:00</published><updated>2019-05-05T12:29:00-07:00</updated><author><name>Nicholas Zwart</name></author><id>tag:gpilab.com,2019-05-05:/2019/05/ismrm-demo-primer/</id><summary type="html">&lt;p&gt;GPI is going to be presented at the &lt;a href="https://www.ismrm.org/19/program_files/WE21.htm"&gt;ISMRM 2019 Open-Source Software Tools for
MR Pulse Design, Simulation &amp;amp; Reconstruction Weekend Course&lt;/a&gt;.
The format of this session will be to allow developers to pitch their designs
and then provide a break-out tutorial session to give participants a chance to
interact with …&lt;/p&gt;</summary><content type="html">&lt;p&gt;GPI is going to be presented at the &lt;a href="https://www.ismrm.org/19/program_files/WE21.htm"&gt;ISMRM 2019 Open-Source Software Tools for
MR Pulse Design, Simulation &amp;amp; Reconstruction Weekend Course&lt;/a&gt;.
The format of this session will be to allow developers to pitch their designs
and then provide a break-out tutorial session to give participants a chance to
interact with the software directly.  To that end, this post is about
installing the latest demo examples via virtual machine or via a free-tier
Amazon-EC2 instance.&lt;/p&gt;
&lt;p&gt;This guide is split into two sections:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Using Amazon-EC2 via AMI&lt;/li&gt;
&lt;li&gt;Using a Virtual Machine Locally&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you are not familiar with either of these technologies, it would behoove you
to take some time before the meeting to get one of these setups working.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Using Amazon-EC2 via AMI&lt;/h1&gt;
&lt;p&gt;Lets start by introducing some terms:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EC2: Elastic Compute Cloud (the '2' is meant to save space by doubling the abbreviated 'C')&lt;ul&gt;
&lt;li&gt;The "elastic compute" generally referes to a computer in the cloud that you can use by secure shelling (ssh) into and starting services like an jupyter notebook or web-server, etc...&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;AMI: Amazon Machine Image (if you say "Amazon-AMI", you could then shorten it by saying A2MI)&lt;ul&gt;
&lt;li&gt;The "machine image" is a freeze dried, pre-installed system that can be run on an EC2 instance. -Giving you the ability to choose the EC2 hardware that you'd like to run the "machine image" on.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The idea is that the GPI demo can be pre-installed on an AMI and the interested
ISMRM participant can simply start their own private EC2 instance to test-drive
the software.  This mechanism for software demos is a new initiative setup by
the organizing committee (see the &lt;a href="https://www.ismrm.org/19m/call-for-community-software-tools-demos/"&gt;Call for Community Software
page&lt;/a&gt; for
details).&lt;/p&gt;
&lt;p&gt;There is still some setup, you'll have to get an Amazon Web Services (AWS)
account, find the GPI-AMI, start an instance, setup an ssh tunnel to interact
with the cloud system.  Since GPI is a graphical desktop application, we've
chosen to use &lt;a href="https://en.m.wikipedia.org/wiki/Virtual_Network_Computing"&gt;VNC&lt;/a&gt;
as a remote desktop client.&lt;/p&gt;
&lt;p&gt;I'm going to include instructions for MacOS, Ubuntu Linux and Windows. -Take
the Windows steps with a grain of salt, I'm listing some instructional links
but this isn't the method I'm personally familiar with.&lt;/p&gt;
&lt;h2&gt;1. Install an SSH Client&lt;/h2&gt;
&lt;p&gt;To connect to the EC2 instance (of an AMI) you'll need a secure shell client
application. This is already part of MacOS and Linux, so you're set.  If you're
using Windows then you'll need a client like
&lt;a href="https://www.chiark.greenend.org.uk/~sgtatham/putty/latest.html"&gt;Putty&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;2. Install VNC&lt;/h2&gt;
&lt;p&gt;Each OS has various VNC capabilities. MacOS has it by default, it can be
accessed by pressing the key sequence &lt;code&gt;Command-k&lt;/code&gt; with the &lt;code&gt;Finder.app&lt;/code&gt; in
focus.&lt;/p&gt;
&lt;h3&gt;Ubuntu Linux&lt;/h3&gt;
&lt;p&gt;I prefer &lt;a href="https://www.tightvnc.com/"&gt;tightVNC&lt;/a&gt; since it has nice compression
features and has been available nearly for ever.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="k"&gt;update&lt;/span&gt;
   &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;xtightvncviewer&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Windows&lt;/h3&gt;
&lt;p&gt;Find and install a VNC client.  It appears that
&lt;a href="https://www.realvnc.com"&gt;RealVNC&lt;/a&gt; has a free trial version.&lt;/p&gt;
&lt;h2&gt;3. Sign up for a Free Amazon Web Service Account&lt;/h2&gt;
&lt;p&gt;Point your browser to &lt;a href="https://console.aws.amazon.com"&gt;console.aws.amazon.com&lt;/a&gt;
and sign up.  You'll have to enter a credit card, but if you only select 'free
tier' services (which are labelled at every step), then you won't incur any
charges... probably.&lt;/p&gt;
&lt;h2&gt;4. Run the GPI-AMI on EC2&lt;/h2&gt;
&lt;p&gt;There are few menus to navigate through to get to the AMI instance that we've
setup for the demo:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Click the Region button in the upper right hand corner of the page.&lt;ul&gt;
&lt;li&gt;Mine says "Ohio", but you can choose either "Ohio" or "Oregon", this will allow you to find the AMI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click the link "Launch a virtual machine"&lt;ul&gt;
&lt;li&gt;this brings you to a page that has various pre-configure images&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click the "Community AMIs" tab on the left hand side of the page.&lt;ul&gt;
&lt;li&gt;use the search bar to find either of the following AMIs:&lt;ul&gt;
&lt;li&gt;Name: GPILAB, AMI-Name: GPILAB-DEMO, AMI ID: ami-02203acf16dd4a983 Region: (US East, Ohio)&lt;/li&gt;
&lt;li&gt;Name: GPILAB, AMI-Name: GPILAB-DEMO, AMI ID: ami-0080216529b04243b Region: (US West, Oregon)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Click the checkbox next to the list AMI and then click the "Launch" button above the list&lt;ul&gt;
&lt;li&gt;Choose the "General purpose" (t2.micro) machine config&lt;/li&gt;
&lt;li&gt;Press "Review and Launch"&lt;/li&gt;
&lt;li&gt;Then Press "Launch"&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;At this point you'll see a dialog box that is asking you to generate a
"key-pair".  This is for secure shelling into your instance, and its the only
way to do so. So choose "create a new key pair" and download the &lt;code&gt;PEM&lt;/code&gt; file to
your home directory (remember what you named it, and where you put it). Hit the
final "Launch" button and then hit the "View Instance" button.&lt;/p&gt;
&lt;h2&gt;5. Connect to Your EC2 Instance&lt;/h2&gt;
&lt;p&gt;Almost connected!  Within the "EC2 Instance" view right click on your newly
running instance to get a popup-dialog, from there hit connect for another
popup that shows the following information:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;To&lt;/span&gt; &lt;span class="nv"&gt;access&lt;/span&gt; &lt;span class="nv"&gt;your&lt;/span&gt; &lt;span class="nv"&gt;instance&lt;/span&gt;:

&lt;span class="mi"&gt;1&lt;/span&gt;. &lt;span class="nv"&gt;Open&lt;/span&gt; &lt;span class="nv"&gt;an&lt;/span&gt; &lt;span class="nv"&gt;SSH&lt;/span&gt; &lt;span class="nv"&gt;client&lt;/span&gt;. &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;find&lt;/span&gt; &lt;span class="nv"&gt;out&lt;/span&gt; &lt;span class="nv"&gt;how&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="k"&gt;connect&lt;/span&gt; &lt;span class="nv"&gt;using&lt;/span&gt; &lt;span class="nv"&gt;PuTTY&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;
&lt;span class="mi"&gt;2&lt;/span&gt;. &lt;span class="nv"&gt;Locate&lt;/span&gt; &lt;span class="nv"&gt;your&lt;/span&gt; &lt;span class="nv"&gt;private&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt; &lt;span class="nv"&gt;file&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;GPILAB_Demo&lt;/span&gt;.&lt;span class="nv"&gt;pem&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;. &lt;span class="nv"&gt;The&lt;/span&gt; &lt;span class="nv"&gt;wizard&lt;/span&gt; &lt;span class="nv"&gt;automatically&lt;/span&gt; &lt;span class="nv"&gt;detects&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt; &lt;span class="nv"&gt;you&lt;/span&gt; &lt;span class="nv"&gt;used&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;launch&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;instance&lt;/span&gt;.
&lt;span class="mi"&gt;3&lt;/span&gt;. &lt;span class="nv"&gt;Your&lt;/span&gt; &lt;span class="nv"&gt;key&lt;/span&gt; &lt;span class="nv"&gt;must&lt;/span&gt; &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;publicly&lt;/span&gt; &lt;span class="nv"&gt;viewable&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;SSH&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;work&lt;/span&gt;. &lt;span class="nv"&gt;Use&lt;/span&gt; &lt;span class="nv"&gt;this&lt;/span&gt; &lt;span class="nv"&gt;command&lt;/span&gt; &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nv"&gt;needed&lt;/span&gt;:

    &lt;span class="nv"&gt;chmod&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt; &lt;span class="nv"&gt;GPILAB_DEMO&lt;/span&gt;.&lt;span class="nv"&gt;pem&lt;/span&gt;

&lt;span class="mi"&gt;4&lt;/span&gt;. &lt;span class="k"&gt;Connect&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;your&lt;/span&gt; &lt;span class="nv"&gt;instance&lt;/span&gt; &lt;span class="nv"&gt;using&lt;/span&gt; &lt;span class="nv"&gt;its&lt;/span&gt; &lt;span class="nv"&gt;Public&lt;/span&gt; &lt;span class="nv"&gt;DNS&lt;/span&gt;:

    &lt;span class="nv"&gt;ec2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;92&lt;/span&gt;.&lt;span class="nv"&gt;us&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;east&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="nv"&gt;compute&lt;/span&gt;.&lt;span class="nv"&gt;amazonaws&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;

&lt;span class="nv"&gt;Example&lt;/span&gt;:

    &lt;span class="nv"&gt;ssh&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;i&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;&lt;/span&gt;&lt;span class="s"&gt;GPILAB_DEMO.pem&lt;/span&gt;&lt;span class="s2"&gt;&amp;quot;&lt;/span&gt; &lt;span class="nv"&gt;root&lt;/span&gt;@&lt;span class="nv"&gt;ec2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;92&lt;/span&gt;.&lt;span class="nv"&gt;us&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;east&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;.&lt;span class="nv"&gt;compute&lt;/span&gt;.&lt;span class="nv"&gt;amazonaws&lt;/span&gt;.&lt;span class="nv"&gt;com&lt;/span&gt;

&lt;span class="nv"&gt;Please&lt;/span&gt; &lt;span class="nv"&gt;note&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;most&lt;/span&gt; &lt;span class="nv"&gt;cases&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;username&lt;/span&gt; &lt;span class="nv"&gt;above&lt;/span&gt; &lt;span class="nv"&gt;will&lt;/span&gt; &lt;span class="nv"&gt;be&lt;/span&gt; &lt;span class="nv"&gt;correct&lt;/span&gt;, &lt;span class="nv"&gt;however&lt;/span&gt; &lt;span class="nv"&gt;please&lt;/span&gt; &lt;span class="nv"&gt;ensure&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt; &lt;span class="nv"&gt;you&lt;/span&gt; &lt;span class="nv"&gt;read&lt;/span&gt; &lt;span class="nv"&gt;your&lt;/span&gt; &lt;span class="nv"&gt;AMI&lt;/span&gt; &lt;span class="nv"&gt;usage&lt;/span&gt; &lt;span class="nv"&gt;instructions&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;ensure&lt;/span&gt; &lt;span class="nv"&gt;that&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;AMI&lt;/span&gt; &lt;span class="nv"&gt;owner&lt;/span&gt; &lt;span class="nv"&gt;has&lt;/span&gt; &lt;span class="nv"&gt;not&lt;/span&gt; &lt;span class="nv"&gt;changed&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;default&lt;/span&gt; &lt;span class="nv"&gt;AMI&lt;/span&gt; &lt;span class="nv"&gt;username&lt;/span&gt;.
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;You'll need to take that information to parameterize your ssh client (with your
instances domain and the user 'ubuntu').&lt;/p&gt;
&lt;h3&gt;MacOS and Linux&lt;/h3&gt;
&lt;p&gt;In a terminal enter the following command (after you replace the relevant parts
with your instance information):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="w"&gt;    &lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ssh&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="ss"&gt;&amp;quot;GPILAB_DEMO.pem&amp;quot;&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;L&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="mi"&gt;5900&lt;/span&gt;&lt;span class="err"&gt;:&lt;/span&gt;&lt;span class="nl"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5900&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;ubuntu&lt;/span&gt;&lt;span class="nv"&gt;@ec2&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;17&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;23&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;92.&lt;/span&gt;&lt;span class="n"&gt;us&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;east&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;2.&lt;/span&gt;&lt;span class="k"&gt;compute&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;amazonaws&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The &lt;code&gt;-L 5900:localhost:5900&lt;/code&gt; is used to forward the VNC port over the ssh
connection.&lt;/p&gt;
&lt;h3&gt;Windows&lt;/h3&gt;
&lt;p&gt;Take note of the &lt;code&gt;PEM&lt;/code&gt; file location, the port forwarding command, the username
and domain; these will be entered into Putty to perform the ssh link and VNC
tunnel.&lt;/p&gt;
&lt;p&gt;Follow &lt;a href="https://crl.ucsd.edu/handbook/vnc/index.php"&gt;this guide&lt;/a&gt; to ensuring
that Putty and VNC are setup correctly.&lt;/p&gt;
&lt;h2&gt;6. Start the VNC Client&lt;/h2&gt;
&lt;p&gt;With the ssh connection established (and the VNC port forwarded to &lt;code&gt;localhost&lt;/code&gt;).
You can fire up your VNC client and enter the following information:&lt;/p&gt;
&lt;h3&gt;MacOS&lt;/h3&gt;
&lt;p&gt;Focus the &lt;code&gt;Finder.app&lt;/code&gt; and hit &lt;code&gt;Command-k&lt;/code&gt;.  In the dialog box labelled 'server address' type:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;vnc&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5900&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Then press connect.&lt;/p&gt;
&lt;h3&gt;Linux&lt;/h3&gt;
&lt;p&gt;In a terminal enter:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;xtightvncviewer&lt;/span&gt; &lt;span class="n"&gt;localhost&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5900&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;Windows&lt;/h3&gt;
&lt;p&gt;Follow &lt;a href="https://crl.ucsd.edu/handbook/vnc/index.php"&gt;this guide&lt;/a&gt; to ensuring
that Putty and VNC are setup correctly.&lt;/p&gt;
&lt;h4&gt;The VNC Password is &lt;code&gt;gpilab&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;Assuming the ISMRM conference wifi has enough bandwidth to tunnel a VNC
connection, you should be good to go ;).&lt;/p&gt;
&lt;h2&gt;Start GPI&lt;/h2&gt;
&lt;p&gt;There is a script on the desktop called &lt;code&gt;startGPI&lt;/code&gt;, just double click to get
started.&lt;/p&gt;
&lt;p&gt;If you'd like more information on the process of setting up an AMI, the ISMRM
organizers have a nice guide (with pictures) used in a past &lt;a href="https://github.com/peterchang77/dl_tutorial"&gt;DL
tutorial&lt;/a&gt;.&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Using A Virtual Machine Locally&lt;/h1&gt;
&lt;p&gt;If your not convinced you'll be able to connect to an Amazon EC3 instance or
perhaps you're more used to using a virtual machine locally, we've got an open
virtual appliance that's ready to go.  You'll need to download and install
either VirtualBox or VMware:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.virtualbox.org/wiki/Downloads"&gt;VirtualBox (MacOS, Linux, Windows)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vmware.com/products/fusion/fusion-evaluation.html"&gt;VMware Fusion (MacOS)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.vmware.com/products/workstation-player/workstation-player-evaluation.html"&gt;VMware Workstation Player (Linux, Windows)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Then you'll have to download our pre-installed GPI virtual machine from the
release page or directly:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/gpilab/framework/releases/tag/v1.0.4"&gt;GPI Release Page&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/gpilab/framework/releases/download/v1.0.4/gpilab_v104_2019may05.ova"&gt;gpilab_v104_2019may05.ova (1.28GB)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Open your chosen virtual machine client and import the downloaded &lt;code&gt;OVA&lt;/code&gt; file.
After a few dialog boxes you should be able to start your VM directly.&lt;/p&gt;
&lt;h2&gt;Start GPI&lt;/h2&gt;
&lt;p&gt;There is a script on the desktop called &lt;code&gt;startGPI&lt;/code&gt;, just double click to get
started.&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>GPI on Windows?!</title><link href="http://gpilab.com/2016/09/gpi-on-windows/" rel="alternate"></link><published>2016-09-27T15:28:00-07:00</published><updated>2016-09-27T15:28:00-07:00</updated><author><name>Akshay Bakhru</name></author><id>tag:gpilab.com,2016-09-27:/2016/09/gpi-on-windows/</id><summary type="html">&lt;blockquote&gt;
&lt;p&gt;GPI is developed at the BNI on Mac and Linux platforms.  We typically don't
develop our MR methods on Windows and therefore have limited experience
with this.  Fortunately, the nice folks at Philips who develop in GPI have
taken it upon themselves to forge a path.  These instructions represent a …&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;blockquote&gt;
&lt;p&gt;GPI is developed at the BNI on Mac and Linux platforms.  We typically don't
develop our MR methods on Windows and therefore have limited experience
with this.  Fortunately, the nice folks at Philips who develop in GPI have
taken it upon themselves to forge a path.  These instructions represent a
first step onto the Windows platform, so we are interested in getting
feedback about your experience with this.  Let us know at gpi@gpilab.com.&lt;/p&gt;
&lt;p&gt;-- Nick Zwart&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;This is a quick step by step guide for getting GPI installed for native use on
Windows!  This capability is made possible through the new "Windows
Subsystem for Linux".  The guide starts with the installation and verification
of Ubuntu Linux and then provides steps for installing GPI.  This is an
exciting step forward for GPI users and developers.&lt;/p&gt;
&lt;h1&gt;Installing the Linux Bash Shell on Windows&lt;/h1&gt;
&lt;h2&gt;Ensure you are running the right Windows 10 version&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You have to have the 64-bit build of Windows 10&lt;/li&gt;
&lt;li&gt;You should have the Windows 10 anniversary update or higher. To check the
   version type “About your PC” in the start menu and press “Enter”. Version
   should be 1607 or higher (shown in the about window below)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/win_1_settings.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Enable developer mode&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open the Settings app and head to Update &amp;amp; Security &amp;gt; For Developers&lt;/li&gt;
&lt;li&gt;Enable Developer Mode&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/win_2_devmode.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Enable the “Windows Subsystem for Linux (Beta)”&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Open the Control Panel, click “Programs,” and click “Turn Windows Features
   On or Off”&lt;/li&gt;
&lt;li&gt;Enable the “Windows Subsystem for Linux (Beta)” option in the list here and
   click “OK.”&lt;/li&gt;
&lt;li&gt;After you do, you’ll be prompted to reboot your computer. Click “Restart
   Now” to reboot your computer and Windows 10 will install the new feature.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/win_3_subsys.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Install&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;After your computer restarts, click the Start button (or press the Windows
   key), type “bash”, and press “Enter.”&lt;/li&gt;
&lt;li&gt;The first time you run the bash.exe file, you’ll be prompted to accept the
   terms of service.&lt;/li&gt;
&lt;li&gt;The command will then download the “Bash on Ubuntu on Windows” application
   from the Windows Store.&lt;/li&gt;
&lt;li&gt;You’ll be asked to create a user account and password for use in the Bash
   environment.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/win_5_useradd.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Run the bash shell&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Now you have a full command-line bash shell based on Ubuntu.&lt;/li&gt;
&lt;li&gt;To open the Bash shell, just open your Start menu and search for “bash” or
   “Ubuntu.”&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/win_6_bash.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Some tips (Installing packages and accessing windows dirs.)&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;You can use Ubuntu’s apt-get command to install software from Ubuntu’s
   repositories.&lt;/li&gt;
&lt;li&gt;Install an Application Package: sudo apt-get install packagename (Replace
   “packagename” with the package’s name.)&lt;/li&gt;
&lt;li&gt;Windows drives will be available in the “mnt” folder&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/win_7_mnt.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Enable GUI app support for Linux Shell&lt;/h1&gt;
&lt;p&gt;Microsoft still does not support graphical applications in Bash on Windows.
However, Microsoft built an entire “Windows Subsystem for Linux” that allows
Windows 10 to natively run Linux applications, even graphical ones. The only
missing piece is an X server that allows those graphical applications to appear
on your Windows desktop. This is basically the same technique people would use
to run graphical Linux desktop applications over a network. Please note: Not
all Linux GUI applications might work with this, but it works for most, and it
works great with GPI.&lt;/p&gt;
&lt;h2&gt;Download and install “Xming X server” for windows&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The installer is available here: https://sourceforge.net/projects/xming/&lt;/li&gt;
&lt;li&gt;Download and install it on your Windows 10 PC&lt;/li&gt;
&lt;li&gt;Just use the default settings and it’ll work fine&lt;/li&gt;
&lt;li&gt;Launch Xming and it will appear in your system tray, running in the
   background and waiting for you to launch a graphical Linux program.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/win_8_xming.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Try a graphical application&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install Firefox using below command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;sudo apt-get install firefox&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;After installation launch Firefox using the below commands&lt;/p&gt;
&lt;p&gt;&lt;code&gt;export DISPLAY=:0&lt;/code&gt; &lt;br&gt;
&lt;code&gt;firefox&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/win_9_firefox.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Install Anaconda&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In Firefox launched above, download the Linux installer from here&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.continuum.io/downloads#linux"&gt;https://www.continuum.io/downloads#linux&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run below command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bash ~/Downloads/Anaconda3-4.1.1-Linux-x86_64.sh&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select a location to install&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Accept the option to add the Anaconda directory to your bash shell &lt;code&gt;PATH&lt;/code&gt;
   environment variable&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;Verify the Install&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Navigate to the Anaconda folder&lt;/li&gt;
&lt;li&gt;Check that python 3.x is installed in the packages&lt;/li&gt;
&lt;li&gt;Check if conda is also available&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/win_10_conda.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Install GPI via Conda&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Run the below command&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda install -c https://conda.anaconda.org/GPI gpi&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If you get the below errors, follow the sub steps&lt;/p&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/win_11_error.jpg"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;This error is also shown if higher versions of numpy and python are
  installed&lt;/li&gt;
&lt;li&gt;Remove the bottleneck package using below command conda remove bottleneck&lt;/li&gt;
&lt;li&gt;Repeat step a to install GPI&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Also install any other packages like core nodes&lt;/p&gt;
&lt;p&gt;&lt;code&gt;conda install -c https://conda.anaconda.org/GPI gpi-core-nodes&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check GPI config as shown here:
   &lt;a href="http://docs.gpilab.com/en/develop/config.html"&gt;http://docs.gpilab.com/en/develop/config.html&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/win_12_gpiconf.jpg"&gt;&lt;/p&gt;
&lt;h2&gt;Launch the GPI GUI&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;export DISPLAY=:0&lt;/code&gt; &lt;br&gt;
&lt;code&gt;gpi&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/win_13_gpi.jpg"&gt;
&lt;img alt="fitw75" src="http://gpilab.com/images/win_14_gpi.jpg"&gt;&lt;/p&gt;
&lt;h1&gt;Troubleshooting&lt;/h1&gt;
&lt;p&gt;If you've encountered any bugs or issues during the installation or when
running GPI, check out the &lt;a href="https://github.com/gpilab/framework/issues"&gt;issue
tracker&lt;/a&gt; for potential solutions or
help. If you have encountered any solutions to those problems or would like to
share an issue that you've fixed, a post on the &lt;a href="https://github.com/gpilab/framework/issues"&gt;issue
tracker&lt;/a&gt; would be much appreciated
:).&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>GPI and the BART</title><link href="http://gpilab.com/2016/02/gpi-and-the-bart/" rel="alternate"></link><published>2016-02-16T12:56:00-07:00</published><updated>2016-02-16T12:56:00-07:00</updated><author><name>Nicholas Zwart</name></author><id>tag:gpilab.com,2016-02-16:/2016/02/gpi-and-the-bart/</id><summary type="html">&lt;p&gt;Recently, the &lt;a href="https://en.wikipedia.org/wiki/Borg_(Star_Trek)"&gt;BORG&lt;/a&gt;
has been used to wrap the &lt;a href="http://mrirecon.github.io/bart/"
target="_blank"&gt;Berkeley Advanced Reconstruction Toolbox (BART)&lt;/a&gt; into a GPI
node library for the purpose of allowing GPI users to easily explore and
utilize this new compressed sensing library.  This &lt;a
href="https://github.com/nckz/bart/blob/master/gpi/README.md"
target="_blank"&gt;GPI-BART library&lt;/a&gt; is accompanied by some example networks
that demonstrate basic wavelet based …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Recently, the &lt;a href="https://en.wikipedia.org/wiki/Borg_(Star_Trek)"&gt;BORG&lt;/a&gt;
has been used to wrap the &lt;a href="http://mrirecon.github.io/bart/"
target="_blank"&gt;Berkeley Advanced Reconstruction Toolbox (BART)&lt;/a&gt; into a GPI
node library for the purpose of allowing GPI users to easily explore and
utilize this new compressed sensing library.  This &lt;a
href="https://github.com/nckz/bart/blob/master/gpi/README.md"
target="_blank"&gt;GPI-BART library&lt;/a&gt; is accompanied by some example networks
that demonstrate basic wavelet based compressed sensing as well as some of the
advanced joint compressed sensing and parallel imaging techniques that the BART
package provides for MR reconstruction.  This post gives an introductory
overview of how the BART was wrapped in GPI and how the &lt;a
href="https://github.com/nckz/bart/blob/master/gpi/README.md"
target="_blank"&gt;GPI-BART node library&lt;/a&gt; can be installed using the latest &lt;a
href="https://github.com/gpilab/framework/releases/tag/v1.0.0-rc1" target="_blank"&gt;GPI v1&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;The BORG&lt;/h2&gt;
&lt;p&gt;One of the new features in &lt;a href="https://github.com/gpilab/framework/releases/tag/v1.0.0-rc1" target="_blank"&gt;GPI
v1&lt;/a&gt; is the BORG interface which allows node developers to easily assimilate
command-line tools for native use in GPI.  The BORG, which stands for Building
Outside Relationships with GPI, provides a simple wrapper interface that takes
care of the file I/O required to communicate with external binaries.  In the
case of the BART, most of the tools require an input data file to process and
subsequently produce a data file as an output.  The BORG simply manages the
temporary files required for this I/O.  Reader and writer functions are
required to translate the Python object (in GPI) to the appropriate file format
for the command-line tool.  In this case the BART comes with a Python library
that translates their CFL/HDR file format to Numpy complex float arrays.  This
can be observed in the following code snippet of a GPI node that wraps the
BART's &lt;code&gt;traj&lt;/code&gt; command.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# load commandline tools&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bart.gpi.borg&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;IFilePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;OFilePath&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Command&lt;/span&gt;
&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;bart.python.cfl&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;cfl&lt;/span&gt; &lt;span class="c1"&gt;# BART file format&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
    &lt;span class="c1"&gt;# grab user input from UI widgets&lt;/span&gt;
    &lt;span class="n"&gt;x&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;readout samples&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;y&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;phase encoding lines&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;acceleration&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;radial&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;g&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;getVal&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;golden-ratio sampling&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# assemble the argument string&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;base_path&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;/traj&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-x &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;x&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-y &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-a &amp;#39;&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt;&lt;span class="p"&gt;)]&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;r&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-r&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;g&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-G&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="n"&gt;d&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;-D&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# setup temp file for getting data back&lt;/span&gt;
    &lt;span class="c1"&gt;# from the external command&lt;/span&gt;
    &lt;span class="n"&gt;out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;OFilePath&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;cfl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readcfl&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;asuffix&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.cfl&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;.hdr&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;args&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

    &lt;span class="c1"&gt;# run commandline and echo full command string&lt;/span&gt;
    &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;Command&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;args&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;

    &lt;span class="c1"&gt;# set GPI node output&lt;/span&gt;
    &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;setData&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;trajectory&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;data&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;The example above starts with a local import of the BORG tools, which were
developed in tandem with this node library.  The GPI widgets values are then
translated to command-line arguments, which are held as strings in a Python
&lt;code&gt;list&lt;/code&gt; object.  Since the &lt;code&gt;Traj&lt;/code&gt; node generates k-space trajectory coordinates,
it requires an output file path to write out the trajectory data.  The
&lt;code&gt;OFilePath&lt;/code&gt; object takes a reference to the file format reader function and
generates a random temporary filename which is included in the arguments list.
When the &lt;code&gt;Command&lt;/code&gt; object executes with the argument list, it spawns a &lt;code&gt;traj&lt;/code&gt;
process and waits for it to finish and then it uses the reader function to
convert the file to a Numpy array.  The &lt;code&gt;OFilePath&lt;/code&gt; object provides a reference
to the Numpy via its &lt;code&gt;data()&lt;/code&gt; method.  Finally, when the &lt;code&gt;OFilePath&lt;/code&gt; object
falls out of scope it cleans up the temporary file on disk.  The random
filenames are important since the GPI canvas may contain multiple instances of
the &lt;code&gt;Traj&lt;/code&gt; node.  The BORG interface simplifies this process which can save
time when wrapping a large library like the BART.&lt;/p&gt;
&lt;p&gt;For more examples, check out the wrapper nodes to the
&lt;a href="https://github.com/nckz/bart/tree/master/gpi"&gt;BART&lt;/a&gt; and
&lt;a href="https://github.com/aganders3/gpi-neurotools/tree/master/FSL/GPI"&gt;FSL&lt;/a&gt;
libraries.&lt;/p&gt;
&lt;h2&gt;Why a Fork?&lt;/h2&gt;
&lt;p&gt;The &lt;a href="https://github.com/nckz/bart/blob/master/gpi/README.md"
target="_blank"&gt;GPI-BART library&lt;/a&gt; is built off of a fork of the actual &lt;a
href="http://mrirecon.github.io/bart/" target="_blank"&gt;BART project&lt;/a&gt;.  While
the GPI wrappers could be considered a separate project, the BART project is
currently undergoing a lot of development and the fork effectively ensures that
the interface between the GPI wrappers and the BART is compatible.  Another
advantage is that this library can coexist with other BART installations on the
same machine without interfering.&lt;/p&gt;
&lt;h2&gt;BART Data Conventions&lt;/h2&gt;
&lt;p&gt;The BART and GPI projects have a few key organizational differences in how they
convey numeric arrays and k-space coordinates.  In order to pass the data
between nodes from each library, the data need to be manipulated to fit the
each node's requirements. This is easily accomplished with the core GPI nodes.
Lets start with an example of the worst case scenario: the &lt;code&gt;traj&lt;/code&gt; node.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/BARTDataConvention.png"&gt;&lt;/p&gt;
&lt;p&gt;The image above shows an example gridded 2D radial trajectory (via the BART
node library) and a gridded 2D spiral trajectory (via the GPI core library).
Starting from the top nodes, you can see that the &lt;code&gt;Traj&lt;/code&gt; node produces radial
coordinates with dimensions &lt;code&gt;[3, 256, 32]&lt;/code&gt; which is 3 cartesian coordinates,
256 sample points and 32 radial arms.  The spiral coordinates from
&lt;code&gt;SpiralCoords&lt;/code&gt; are ordered &lt;code&gt;[32, 256, 2]&lt;/code&gt; for 32 spiral arms, 256 sample points
and 2 cartesian coordinates.&lt;/p&gt;
&lt;h3&gt;Step 1: Reduce Coordinates&lt;/h3&gt;
&lt;p&gt;Since this is a 2D trajectory, the &lt;code&gt;Traj&lt;/code&gt; node passes zeros for the 'Z'
coordinate and the &lt;code&gt;SpiralCoords&lt;/code&gt; node passes 2 coordinates per point.  In
order to use the radial trajectory with the core &lt;code&gt;Grid&lt;/code&gt; node, the 3rd
coordinate of the array must be cropped out.  This is accomplished with the
&lt;code&gt;Reduce&lt;/code&gt; node set to &lt;code&gt;B/E&lt;/code&gt; where the '(B)eginning' index is 1 and the
'(E)nding' index is 2.  You can see that after &lt;code&gt;Reduce&lt;/code&gt;, the &lt;code&gt;Traj&lt;/code&gt; dimensions
are &lt;code&gt;[2, 256, 32]&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Step 2: Transpose Dimensions&lt;/h3&gt;
&lt;p&gt;The &lt;code&gt;Transpose&lt;/code&gt; node is used to flip the order that the trajectory data is
organized in. After the &lt;code&gt;Transpose&lt;/code&gt; node, the dimensions are &lt;code&gt;[32, 256, 2]&lt;/code&gt;,
which matches the order of the spiral coordinates.&lt;/p&gt;
&lt;h3&gt;Step 3: Recast the Data Type&lt;/h3&gt;
&lt;p&gt;If you hover the mouse cursor over the coordinate port on the &lt;code&gt;Grid&lt;/code&gt; node a
tooltip will pop up with the data type required by that port. In this case,
&lt;code&gt;Grid&lt;/code&gt; can take floating point arrays with single or double precision.
Hovering over the &lt;code&gt;Traj&lt;/code&gt; output port shows that the array is of type &lt;code&gt;complex
float&lt;/code&gt;.  In this case the trajectory definition only makes use of the real
component so the imaginary component is set to zero.  This can be directly
recast into a float array without loss of data.&lt;/p&gt;
&lt;h3&gt;Step 4: Coordinate Scaling&lt;/h3&gt;
&lt;p&gt;You have noticed that the first node after &lt;code&gt;Traj&lt;/code&gt; is &lt;code&gt;Math&lt;/code&gt;.  This is because
the trajectory coordinate convention used in the BART is from N/2-1 to N/2
where N is the number of points along a dimension of the grid matrix.  The GPI
core library uses the convention of -0.5 to 0.5.  So the coordinates are
divided by the target matrix size via element-wise scalar division.&lt;/p&gt;
&lt;p&gt;This example has shown how the BART and core GPI nodes can be easily adapted to
communicate data between the two libraries using the stock data manipulation
nodes in the core library.  The conventions for data between these two
libraries are different as would be expected between any two libraries that are
developed independently.  The goal for this example is to show that a cross
library data transfer may require some extra attention.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/BARTDataConvention_BNI2BART.png"&gt;&lt;/p&gt;
&lt;p&gt;Another approach to this problem would be to integrate these differences into
the nodes themselves.  An example of this can be seen in the image above.  The
&lt;code&gt;SpiralCoords&lt;/code&gt; node is generating a trajectory that is reformatted using the
&lt;code&gt;BNI2BART_Traj&lt;/code&gt; node (included in the wrapper library).  This allows the
coordinates to be directly used in the BART's &lt;code&gt;NuFFT&lt;/code&gt; node.&lt;/p&gt;
&lt;h2&gt;GPI-BART Installation&lt;/h2&gt;
&lt;p&gt;There are two components to the &lt;a
href="https://github.com/nckz/bart/blob/master/gpi/README.md"
target="_blank"&gt;GPI-BART node library&lt;/a&gt; installation: the BART compilation
and the GPI node library installation.  Before starting download or clone the
GPI-BART fork:&lt;/p&gt;
&lt;p&gt;First (if you haven't already), make a 'gpi' directory in your home directory.
If you're not sure why you'd do this, checkout the post &lt;a href="http://gpilab.com/posts/2015-06-30-Installing-Node-Libraries.md"&gt;Installing Node
Libraries&lt;/a&gt;.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;mkdir&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;gpi&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;gpi&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Next, use &lt;a href="https://git-scm.com/"&gt;git&lt;/a&gt; to clone the node library project into a
directory called 'bart'.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nckz&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bart&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;bart&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;BART Compilation&lt;/h3&gt;
&lt;p&gt;The BART compilation instructions can be found in the
&lt;a href="https://github.com/nckz/bart#22-downloading-and-compilation"&gt;README.md&lt;/a&gt; in the
base directory of the project source code.  To summarize, the BART has some
third party library dependencies that are specific to each OS (e.g. &lt;a href="https://github.com/nckz/bart#212-mac-os-x"&gt;Mac
OSX&lt;/a&gt;).  For OSX, the Xcode and the
gcc compiler must be installed before the &lt;code&gt;make&lt;/code&gt; command can be issued.  Once
you've installed the dependencies, make the BART.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="o"&gt;~/&lt;/span&gt;&lt;span class="n"&gt;gpi&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bart&lt;/span&gt;
    &lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;make&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;This will make the BART command-line executables, which will be accessible from
the &lt;code&gt;~/gpi/bart&lt;/code&gt; directory.&lt;/p&gt;
&lt;h3&gt;Installing Node Libraries&lt;/h3&gt;
&lt;p&gt;The BART compilation instructions above basically install the BART under a GPI
node library directory structure.  GPI will look at the &lt;code&gt;~/gpi/bart&lt;/code&gt; directory
as if it where a Python library.  In our fork, we've included the GPI wrapper
nodes under the &lt;a href="https://github.com/nckz/bart/tree/master/gpi"&gt;&lt;code&gt;bart/gpi&lt;/code&gt;&lt;/a&gt;
directory. This fixed directory structure allows the wrapper code to maintain
the relative paths for the BART executables.  Since the GPI wrappers are pure
Python, they don't require compilation. If your GPI installation is setup with
the default paths then GPI-BART library is ready to go.&lt;/p&gt;
&lt;p&gt;If you have path modifications in your &lt;code&gt;~/.gpirc&lt;/code&gt; file or the nodes are not
visible in your library menu, consult the
&lt;a href="http://docs.gpilab.com/en/develop/config.html"&gt;Configuration&lt;/a&gt; docs or check out the
post on &lt;a href="http://gpilab.com/posts/2015-06-30-Installing-Node-Libraries.md"&gt;Installing Node Libraries&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Events&lt;/h2&gt;
&lt;p&gt;This work has been presented at the &lt;a href="http://www.ismrm.org/workshops/Data16/"&gt;ISMRM Workshop on Data Sampling &amp;amp; Image
Reconstruction&lt;/a&gt; in Sedona Arizona this
last January and will be presented at the &lt;a href="http://www.ismrm.org/2016-annual-meeting-exhibition/"&gt;ISMRM Annual Meeting &amp;amp;
Exhibition&lt;/a&gt; in Singapore
this March.&lt;/p&gt;
&lt;h2&gt;Thanks&lt;/h2&gt;
&lt;p&gt;We'd like to thanks the BART developers at UC Berkeley for their help in
building these nodes.&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>GPI v1 Release</title><link href="http://gpilab.com/2016/01/gpi-v1-release/" rel="alternate"></link><published>2016-01-13T13:56:00-07:00</published><updated>2016-01-13T13:56:00-07:00</updated><author><name>Nicholas Zwart</name></author><id>tag:gpilab.com,2016-01-13:/2016/01/gpi-v1-release/</id><summary type="html">&lt;p&gt;The GPI version 1-beta is available for download!  This version marks some
major framework changes with the transition to &lt;a
href="https://docs.python.org/3/" target="_blank"&gt;Python 3&lt;/a&gt;, packaging via
&lt;a href="http://anaconda.org" target="_blank"&gt;Anaconda.org&lt;/a&gt;, PyFI API
support for the &lt;a href="http://eigen.tuxfamily.org/" target="_blank"&gt;Eigen&lt;/a&gt;
template library, mmap based node communication, the BORG interface for binary
encapsulation, and &lt;a href="http://www.json.org/" target="_blank"&gt;JSON&lt;/a&gt;
based network descriptions to name …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The GPI version 1-beta is available for download!  This version marks some
major framework changes with the transition to &lt;a
href="https://docs.python.org/3/" target="_blank"&gt;Python 3&lt;/a&gt;, packaging via
&lt;a href="http://anaconda.org" target="_blank"&gt;Anaconda.org&lt;/a&gt;, PyFI API
support for the &lt;a href="http://eigen.tuxfamily.org/" target="_blank"&gt;Eigen&lt;/a&gt;
template library, mmap based node communication, the BORG interface for binary
encapsulation, and &lt;a href="http://www.json.org/" target="_blank"&gt;JSON&lt;/a&gt;
based network descriptions to name a few.&lt;/p&gt;
&lt;h3&gt;Python 3&lt;/h3&gt;
&lt;p&gt;GPI has moved to Python 3! As GPI development continues we hope to take
advantage of the new features offered in Python 3 such as the updated fork
server, coroutines, and maybe even some lighthearted type hinting.  The core
node library has also been updated to work with Python 3.  Those who are
interested in porting their code to should pay attention to some of the &lt;a
href="http://python-future.org/compatible_idioms.html"
target="_blank"&gt;differences in syntax&lt;/a&gt;, most notably for &lt;code&gt;print&lt;/code&gt; statements
and &lt;a href="https://www.python.org/dev/peps/pep-0238/" target="_blank"&gt;integer
division&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Many of the improvements made in GPI v1 are also available in a Python 2 branch
of the framework and core node projects (tagged as GPI version 0.6).  These can
be found on github &lt;a href="https://github.com/gpilab/framework/tree/v0.6.0-rc"
target="_blank"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;Conda Packaging&lt;/h3&gt;
&lt;p&gt;GPI is now available as a conda installer script as well as a preassembled
conda stack.  GPI can also be installed in an existing conda distro from &lt;a
href="https://anaconda.org/GPI/packages" target="_blank"&gt;Anaconda.org/gpi&lt;/a&gt;
using the &lt;code&gt;conda&lt;/code&gt; command.  The move to conda packaging has also given GPI the
capability to check for framework and core node updates.&lt;/p&gt;
&lt;h3&gt;Eigen in PyFI&lt;/h3&gt;
&lt;p&gt;The Eigen template library has been wrapped in PyFI to add some linear algebra
functionality to the C++ API.  These new interfaces further facilitate the
translation of PyFI code for use in the Philips online reconstruction platform.&lt;/p&gt;
&lt;p&gt;Eigen also provides an effective workaround for a &lt;a
href="https://github.com/obspy/obspy/wiki/Notes-on-Parallel-Processing-with-Python-and-ObsPy"
target="_blank"&gt;bug in the OSX accelerate framework&lt;/a&gt; when forking processes.&lt;/p&gt;
&lt;h3&gt;mmap&lt;/h3&gt;
&lt;p&gt;The use of memory mapped data has further improved the speed and memory usage
in the multi-processing regime of node execution.  This does not affect the
main loop or thread based modes of operation.&lt;/p&gt;
&lt;h3&gt;BORG&lt;/h3&gt;
&lt;p&gt;The BORG (Building Outside Relationships with GPI) interface has been developed
to assist in assimilating the functionality of other software projects for
native use in GPI.  The interface reduces the coding overhead for generating a
communication layer to external command-line programs.  This is accomplished by
providing wrappers that handle the inputs, outputs and arguments to the system
call that executes the external program.  The inputs and outputs are handled
with temporary files that are managed by the interface.  The result allows a
GPI developer to quickly encapsulate the functionality of other software
projects to be used in conjunction with their own GPI node library for fleet
prototyping.  Examples of the BORG interface can be found in the &lt;a
href="https://github.com/nckz/bart/tree/master/gpi" target="_blank"&gt;BART
(Berkeley Advanced Reconstruction Toolbox)&lt;/a&gt; and &lt;a
href="https://github.com/aganders3/gpi-neurotools" target="_blank"&gt;FSL (FMRIB
Software Library)&lt;/a&gt; projects.&lt;/p&gt;
&lt;h3&gt;Download&lt;/h3&gt;
&lt;p&gt;For more information about the updates check out the
&lt;a href="http://docs.gpilab.com/en/develop/CHANGELOG.html"&gt;changelog&lt;/a&gt; or
just download the latest release at &lt;a href="/downloads"&gt;gpilab.com/downloads&lt;/a&gt;.&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Editor's Pick!</title><link href="http://gpilab.com/2015/12/editors-pick/" rel="alternate"></link><published>2015-12-18T20:30:00-07:00</published><updated>2015-12-18T20:30:00-07:00</updated><author><name>Nicholas Zwart</name></author><id>tag:gpilab.com,2015-12-18:/2015/12/editors-pick/</id><summary type="html">&lt;p&gt;The GPI article entitled &lt;a
href="http://onlinelibrary.wiley.com/doi/10.1002/mrm.25528/abstract"
target="_blank"&gt;"Graphical programming interface: A development environment for
MRI methods"&lt;/a&gt; has been chosen as one of the &lt;a
href="http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1522-2594/homepage/editor_s_picks.htm"
target="_blank"&gt;MRM Editor's Picks&lt;/a&gt; for November!  There is also a short
interview with Jim Pipe and myself from the folks at &lt;a
href="http://www.ismrm.org/qa-with-nicholas-zwart-and-james-pipe/"
target="_blank"&gt;MRM Highlights&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This mentioning is coming a little late, but …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The GPI article entitled &lt;a
href="http://onlinelibrary.wiley.com/doi/10.1002/mrm.25528/abstract"
target="_blank"&gt;"Graphical programming interface: A development environment for
MRI methods"&lt;/a&gt; has been chosen as one of the &lt;a
href="http://onlinelibrary.wiley.com/journal/10.1002/(ISSN)1522-2594/homepage/editor_s_picks.htm"
target="_blank"&gt;MRM Editor's Picks&lt;/a&gt; for November!  There is also a short
interview with Jim Pipe and myself from the folks at &lt;a
href="http://www.ismrm.org/qa-with-nicholas-zwart-and-james-pipe/"
target="_blank"&gt;MRM Highlights&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;This mentioning is coming a little late, but thats better than never ;).&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Installing Node Libraries</title><link href="http://gpilab.com/2015/06/installing-node-libraries/" rel="alternate"></link><published>2015-06-30T14:21:00-07:00</published><updated>2015-06-30T14:21:00-07:00</updated><author><name>Ashley Anderson</name></author><id>tag:gpilab.com,2015-06-30:/2015/06/installing-node-libraries/</id><summary type="html">&lt;p&gt;One of the nicest features of GPI is how easy it is to add a library and begin
using new nodes. Whether the library contains nodes and networks you created,
or code from a collaborator or colleague, installation is the same simple
process.&lt;/p&gt;
&lt;p&gt;Here we cover installing an updated version …&lt;/p&gt;</summary><content type="html">&lt;p&gt;One of the nicest features of GPI is how easy it is to add a library and begin
using new nodes. Whether the library contains nodes and networks you created,
or code from a collaborator or colleague, installation is the same simple
process.&lt;/p&gt;
&lt;p&gt;Here we cover installing an updated version of the Core library. This will
serve as a general demonstration of how to install additional node libraries.
&lt;h2&gt;The .gpirc File&lt;/h2&gt;
GPI searches for libraries (by default) in a &lt;code&gt;~/gpi/&lt;/code&gt; directory
within your home directory. On Mac OS X, the full path of this folder is
&lt;code&gt;/Users/&amp;lt;username&amp;gt;/gpi/&lt;/code&gt;, and on Ubuntu (and most flavors of
Linux) it is &lt;code&gt;/home/&amp;lt;username&amp;gt;/gpi/&lt;/code&gt;. Thus, to install a new
library, simply move its root directory into this folder. New libraries are
imported automatically any time GPI is started.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;~/.gpirc&lt;/code&gt; file contains per-user configuration options for GPI.
Since the file is hidden (begins with a &lt;code&gt;.&lt;/code&gt;), you will not see it in
a normal directory listing; use &lt;code&gt;ls -a&lt;/code&gt; to see it. If this file does
not exist on your system, you can generate a basic version from the GPI
"Config" menu.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/Screenshot-2015-02-05-11.21.10-300x80.png"&gt;&lt;/p&gt;
&lt;p&gt;Select "Generate Config File" to create a basic .gpirc file.&lt;/p&gt;
&lt;p&gt;The default GPI library path (&lt;code&gt;~/gpi/&lt;/code&gt;) is stored in the
&lt;code&gt;LIB_DIRS&lt;/code&gt; variable within the &lt;code&gt;.gpirc&lt;/code&gt; file. You can amend the
&lt;code&gt;LIB_DIRS&lt;/code&gt; in your &lt;code&gt;.gpirc&lt;/code&gt; file to tell GPI to look for
libraries in some other directories, if you prefer. Append (or prepend)
directories to &lt;code&gt;LIB_DIRS&lt;/code&gt; separated by colons.&lt;/p&gt;
&lt;p&gt;&lt;img alt="fitwidth" src="http://gpilab.com/images/Screenshot-2015-06-30-14.09.30.png"&gt;&lt;/p&gt;
&lt;p&gt;My .gpirc file with modified LIB_DIRS to include additional node libraries.&lt;/p&gt;
&lt;h2&gt;Installing the Updated Core Library&lt;/h2&gt;

&lt;p&gt;The GPI package includes a snapshot of the Core node library, but new versions
of the Core nodes are maintained on &lt;a title="GitHub"
href="https://github.com/gpilab/core-nodes"
target="_blank"&gt;GitHub&lt;/a&gt;. Installing the updated Core library will &lt;em&gt;not&lt;/em&gt;
override the default installation of the Core library, so you need to remove
its path (&lt;code&gt;/opt/gpi/node/core/&lt;/code&gt;) from the &lt;code&gt;LIB_DIRS&lt;/code&gt; variable in
your &lt;code&gt;.gpirc&lt;/code&gt; file. A current snapshot of the Core library can be downloaded as
a zip archive from main GitHub page. To install this snapshot, simply unzip the
archive into &lt;code&gt;~/gpi/core/&lt;/code&gt; as described above.&lt;/p&gt;
&lt;p&gt;To stay up-to-date with the latest changes, it is recommended to link your
local Core library with the remote repository by cloning it using &lt;a
title="Git" href="http://git-scm.com" target="_blank"&gt;Git&lt;/a&gt;. Git is a popular
version control system, available on all platforms. Using Git makes it easy to
update your local copy of the source code, and to contribute back your own
enhancements and bug fixes.&lt;/p&gt;
&lt;p&gt;To install the Core library using Git, open a terminal session and execute the
following commands (after installing Git if necessary):&lt;/p&gt;
&lt;pre&gt;% cd ~/gpi
% git clone https://github.com/gpilab/core-nodes.git core
&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;This will create a copy of the remote &lt;code&gt;core-nodes&lt;/code&gt; repository to
your computer, inside your default GPI library directory.&lt;/p&gt;
&lt;h3&gt;Compiling the Core Library&lt;/h3&gt;

&lt;p&gt;GPI includes a Python/C++ interface called PyFI. The Core library uses PyFI to
implement algorithms in a combination of C++ and Python code. GPI includes a
script (&lt;code&gt;gpi_make&lt;/code&gt;) to help compile C++ files associated with a GPI
library.&lt;/p&gt;
&lt;p&gt;Compiled binary objects are not included in the Git repository, so it's
necessary to build the library after installation. Once you have downloaded or
cloned the repository into &lt;code&gt;~/gpi/core/&lt;/code&gt;, run the following commands
to compile the C++ code:
&lt;pre&gt;% cd ~/gpi/core
% gpi_make --all
&lt;/pre&gt;
&lt;br&gt;&lt;/p&gt;
&lt;h3&gt;Updating the Core Library&lt;/h3&gt;

&lt;p&gt;As mentioned, Git makes it easy to update the Core library with any new changes
from the developers. If you cloned the repository using Git, you can update
your copy of the Core library using the following commands:&lt;/p&gt;
&lt;pre&gt;% cd ~/gpi/core
% git pull
% gpi_make --all&lt;/pre&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;Running &lt;code&gt;git pull&lt;/code&gt; fetches any new changes from the core-nodes
repository on GitHub, and merges them into your local copy. To finish updating,
it's also good idea to re-compile the C++ code in case any changes were
made. Note you may get some warnings or errors if you attempt to "pull" changes
after modifying the code yourself. If you have changes you'd like to keep (or
contribute back!) please fork the project on GitHub, or just get in touch!&lt;/p&gt;
&lt;h4&gt;Branches in the &lt;code&gt;core-nodes&lt;/code&gt; Repository&lt;/h4&gt;

&lt;p&gt;Development in the &lt;code&gt;core-nodes&lt;/code&gt; repository follows the &lt;a
title="gitflow"
href="http://nvie.com/posts/a-successful-git-branching-model/"&gt;gitflow&lt;/a&gt; branching
model. There are two main branches in this model: &lt;em&gt;master&lt;/em&gt;, which
contains stable releases; and &lt;em&gt;develop&lt;/em&gt;, which contains newer,
untested changes. Most likely you will want to keep your local copy on
the &lt;em&gt;master&lt;/em&gt; branch, unless you are planning to make changes to the
library and contribute them back to the community.&lt;/p&gt;
&lt;p&gt;Use &lt;code&gt;git branch&lt;/code&gt; to see which branch you are on, and &lt;code&gt;git
checkout &amp;lt;branch name&amp;gt;&lt;/code&gt; to switch to a different branch. You will
again want to recompile (&lt;code&gt;gpi_make --all&lt;/code&gt;) any time you change branches.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Hopefully this will help you collaborate and stay up-to-date with the latest
changes in your GPI node libraries. Check out the
&lt;a href="http://docs.gpilab.com"&gt;documentation&lt;/a&gt; for more information, and please &lt;a href="/community"&gt;get
in touch&lt;/a&gt; if you have questions or if you're
interested in contributing to the project.
&lt;h2&gt;&lt;/h2&gt;&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>Philips Raw Data Reader</title><link href="http://gpilab.com/2015/04/philips-raw-data-reader/" rel="alternate"></link><published>2015-04-06T13:27:00-07:00</published><updated>2015-04-06T13:27:00-07:00</updated><author><name>Nicholas Zwart</name></author><id>tag:gpilab.com,2015-04-06:/2015/04/philips-raw-data-reader/</id><summary type="html">&lt;p&gt;The Philips raw data reader node, for MR data, is now available as a binary
release. Users of the Philips raw data formats can directly import the raw data
into GPI and start investigating. Thanks to the tenacious efforts of Ryan
Robison, the reader node supports a plethora of file …&lt;/p&gt;</summary><content type="html">&lt;p&gt;The Philips raw data reader node, for MR data, is now available as a binary
release. Users of the Philips raw data formats can directly import the raw data
into GPI and start investigating. Thanks to the tenacious efforts of Ryan
Robison, the reader node supports a plethora of file formats such as .data,
.list, .lab, .raw, .sin, .par, .xml, .rec, and .cpx at many different release
levels.  The package releases are available for download on &lt;a
href="https://github.com/gpilab/philips-data-reader"
target="_blank"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;h2&gt;Output&lt;/h2&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/Screen-Shot-2015-04-03-at-4.55.34-PM-300x226.png"&gt;&lt;/p&gt;
&lt;p&gt;The ReadPhilips node parses the file contents for MR data, converts the data to
a numpy numeric array and makes it available as an output port.  Depending on
the input files and application, there may be multiple output datasets
corresponding to the sampled k-space, noise measurements, etc...  The reader
also parses any available header information (which is format dependent) and
populates a python-dictionary object which is also pushed to an output port.  
This header information can be viewed via the 'dictionquery' node which
displays python-dictionary information as a simple list.&lt;/p&gt;
&lt;h2&gt;Widgets&lt;/h2&gt;
&lt;p&gt;&lt;img alt="fitw75" src="http://gpilab.com/images/ReadPhilipsUI_ex_head-240x300.jpg"&gt;&lt;/p&gt;
&lt;p&gt;The ReadPhilips menu provides an interface to browse for the desired files and
displays basic file system information and a summary of the header information
(when available).  The interface also provides options for various minor data
corrections and the ability to load single coils or slices from the file.&lt;/p&gt;
&lt;h2&gt;&lt;a href="/community"&gt;Community&lt;/a&gt;&lt;/h2&gt;
&lt;p&gt;The ReadPhilips node is available to the scientific community as a closed
source binary package allowing users immediate access to this functionality.
 The source code for this project can be made available to Philips researchers,
who have signed an NDA, in an effort to foster community development and
maintenance of the reader as the Philips product software advances.
 This project provides a model for GPI developers to generate reader tools for
other closed raw data formats.  In this way, the closed source tools can be
maintained by developers, who have vendor specific access, allowing the tool to
be updated with product changes.  The end users benefit by moving forward with
their research without getting tangled up in the proprietary code.&lt;/p&gt;
&lt;p&gt;If you have a GPI node project, you are welcome to submit a link for listing on
the &lt;a href="/community"&gt;community&lt;/a&gt; page.&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>GPI v½ Release</title><link href="http://gpilab.com/2015/02/gpi-v-12-release/" rel="alternate"></link><published>2015-02-27T15:39:00-07:00</published><updated>2015-02-27T15:39:00-07:00</updated><author><name>Nicholas Zwart</name></author><id>tag:gpilab.com,2015-02-27:/2015/02/gpi-v-12-release/</id><summary type="html">&lt;p&gt;GPI v0.5 is now available for download in its first public release!&lt;/p&gt;
&lt;div style="display: block; margin-left: auto; margin-right: auto; position: relative; width: 100%; height: 100px;"&gt;
&lt;div id="image1_ban" style="position: relative; top: 0px; left: 0px; padding: 10px;"&gt;&lt;img class="noborder aligncenter size-medium wp-image-5" src="http://gpilab.com/images/logo_subtitle.png" alt="logo" width="300" height="113" /&gt;&lt;/div&gt;
&lt;div id="image2_conf" style="background: none repeat scroll 0% 0% transparent; outline: medium none; text-align: center; vertical-align: middle; position: relative; top: -200px; left: -200px; z-index: 2; padding: 10px;"&gt;&lt;img class="noborder aligncenter size-medium wp-image-324" src="http://gpilab.com/images/confetti.gif" alt="confetti" width="300" /&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The GPI project has been able to develop into a robust first release thanks to
the efforts of the &lt;a
href="https://github.com/gpilab/core-nodes/blob/develop/AUTHORS"
target="_blank"&gt;Keller Center for Imaging Innovation&lt;/a&gt; group in Phoenix,
sponsorship from Philips Healthcare and the collaboration with Phoenix
Children's …&lt;/p&gt;</summary><content type="html">&lt;p&gt;GPI v0.5 is now available for download in its first public release!&lt;/p&gt;
&lt;div style="display: block; margin-left: auto; margin-right: auto; position: relative; width: 100%; height: 100px;"&gt;
&lt;div id="image1_ban" style="position: relative; top: 0px; left: 0px; padding: 10px;"&gt;&lt;img class="noborder aligncenter size-medium wp-image-5" src="http://gpilab.com/images/logo_subtitle.png" alt="logo" width="300" height="113" /&gt;&lt;/div&gt;
&lt;div id="image2_conf" style="background: none repeat scroll 0% 0% transparent; outline: medium none; text-align: center; vertical-align: middle; position: relative; top: -200px; left: -200px; z-index: 2; padding: 10px;"&gt;&lt;img class="noborder aligncenter size-medium wp-image-324" src="http://gpilab.com/images/confetti.gif" alt="confetti" width="300" /&gt;&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&amp;nbsp;&lt;/p&gt;
&lt;p&gt;The GPI project has been able to develop into a robust first release thanks to
the efforts of the &lt;a
href="https://github.com/gpilab/core-nodes/blob/develop/AUTHORS"
target="_blank"&gt;Keller Center for Imaging Innovation&lt;/a&gt; group in Phoenix,
sponsorship from Philips Healthcare and the collaboration with Phoenix
Children's Hospital, Vanderbilt University, University of Texas Southwestern,
Tsinghua University and Cincinnati Children's Hospital as well as those who
have participated in GPI training.&lt;/p&gt;
&lt;p&gt;GPI now has native packages for OSX, Linux, and a pre-installed Linux virtual
machine to run GPI on your PC. The GPI project and node code is also now being
hosted on GitHub.  Visit &lt;a href="http://github.com/gpilab"
target="_blank"&gt;github.com/gpilab&lt;/a&gt; to get the latest updates and node
library releases. There is now a &lt;a
href="http://gpilab.com/mailman/listinfo/gpi-users_gpilab.com"
target="_blank"&gt;GPI users&lt;/a&gt; mailing list for users who wish to participate in
community support.&lt;/p&gt;
&lt;h2&gt;What's New in Version 0.5&lt;/h2&gt;
&lt;h3&gt;Features&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Added Support for OSX 10.7&lt;/li&gt;
    &lt;li&gt;Upgraded to Anaconda 2.1&lt;/li&gt;
    &lt;li&gt;Improved HDF5 reader node&lt;/li&gt;
    &lt;li&gt;Added a new Matlab file reader (for old and new HDF5 formats)&lt;/li&gt;
    &lt;li&gt;&lt;strong&gt;Left-mouse-button port-edge-connect!&lt;/strong&gt;&lt;/li&gt;
    &lt;li&gt;Right-click downstream ports to delete an edge &lt;br&gt;&lt;img class=" size-full wp-image-184 aligncenter" src="http://gpilab.com/images/rightclickdelete.gif" alt="rightclickdelete" width="244" height="202" /&gt;&lt;br&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;ul&gt;
    &lt;li&gt;Node reload; just select a node (or multiple nodes), press Ctrl+R and the node will update and reconnect to up and downstream nodes&lt;br&gt;&lt;img class="alignnone size-full wp-image-182 aligncenter" src="http://gpilab.com/images/node_reload.gif" alt="node_reload" width="262" height="212" /&gt;&lt;br&gt;&lt;/li&gt;
    &lt;li&gt;Auto generate the user library (via the main menu)&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;gpi_make&lt;/code&gt; now does a force recompile on all node .py files&lt;/li&gt;
    &lt;li&gt;&lt;code&gt;LIB_DIRS&lt;/code&gt;, in the &lt;code&gt;.gpirc&lt;/code&gt;, will now search the parent directory for libraries, so now you can easily setup your custom library directory and new libraries will be loaded as they are added
&lt;ul&gt;
    &lt;li&gt;By default, the &lt;code&gt;~/gpi&lt;/code&gt; directory is searched&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;h3&gt;Bugfixes&lt;/h3&gt;
&lt;ul&gt;
    &lt;li&gt;Fixed node updating via drag'n drop, copy/paste, or reload by force recompiling all node .py files&lt;/li&gt;
    &lt;li&gt;Fixed file association bug for capitalized extensions&lt;/li&gt;
    &lt;li&gt;Updated numpy to qimage conversions with the qimage2ndarray library&lt;/li&gt;
    &lt;li&gt;Removed zlib string compression on StringBox widgets to prevent nodes from segfaulting when using the StringBox in Linux&lt;/li&gt;
&lt;/ul&gt;

&lt;p style="text-align: center;"&gt;&lt;/p&gt;</content><category term="posts"></category></entry><entry><title>New Tutorial Screencasts</title><link href="http://gpilab.com/2014/10/new-tutorial-screencasts/" rel="alternate"></link><published>2014-10-10T15:06:00-07:00</published><updated>2014-10-10T15:06:00-07:00</updated><author><name>Nicholas Zwart</name></author><id>tag:gpilab.com,2014-10-10:/2014/10/new-tutorial-screencasts/</id><summary type="html">&lt;p&gt;New screencasts have been added to help users get started.  There is now a quick-start guide that covers the user interface as well as exercise units that introduce the functionality of the most commonly used GPI nodes.&lt;/p&gt;
&lt;table style="width:100%"&gt;
  &lt;tr&gt;
&lt;td style="background-color:white; border: 0px;"&gt;&lt;a href="http://youtu.be/X9ddBrbFAWU?list=UUg8BPyZL30zyCIz1jJVAL1A"&gt;&lt;img class="alignnone size-medium wp-image-71" 
src="http://gpilab.com/images/Screen-Shot-2014-10-10-at-2.53.17-PM-300x225.png" alt="Screen Shot 2014-10-10 at 2.53.17 PM" width="300" height="224" /&gt;&lt;br&gt;QuickStart&lt;/a&gt;&lt;/td&gt;

&lt;td style="background-color:white; border: 0px;"&gt;&lt;a href="http://youtu.be/XKCml0Z_HD4?list=UUg8BPyZL30zyCIz1jJVAL1A"&gt;&lt;img class="alignnone size-medium wp-image-68" src="http://gpilab.com/images/Screen-Shot-2014-10-10-at-2.49.17-PM-300x224.png" alt="Screen Shot 2014-10-10 at 2.49.17 PM" width="300" height="224" /&gt;&lt;br&gt;Module 1.1: Cross Sections&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;  
  &lt;tr&gt;
&lt;td style="background-color:white; border: 0px;"&gt;&lt;a href="http://youtu.be/AL7FPOPCcfY?list=UUg8BPyZL30zyCIz1jJVAL1A"&gt;&lt;img class="alignnone size-medium wp-image-69" src="http://gpilab.com/images/Screen-Shot-2014-10-10-at-2.51.10-PM-300x224.png" alt="Screen Shot 2014-10-10 at 2.51.10 PM" width="300" height="224" /&gt;&lt;br&gt;Module 1.2: k-Space Filter&lt;/a&gt;&lt;/td&gt;

&lt;td style="background-color:white; border: 0px;"&gt;&lt;a href="http://youtu.be/6nUXaXlP4Ss?list=UUg8BPyZL30zyCIz1jJVAL1A"&gt;&lt;img class="alignnone size-medium wp-image-70" src="http://gpilab.com/images/Screen-Shot-2014-10-10-at-2.52.18-PM-300x224.png" alt="Screen Shot 2014-10-10 at 2.52.18 PM" width="300" height="224" /&gt;&lt;br&gt;Module 1 …&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;</summary><content type="html">&lt;p&gt;New screencasts have been added to help users get started.  There is now a quick-start guide that covers the user interface as well as exercise units that introduce the functionality of the most commonly used GPI nodes.&lt;/p&gt;
&lt;table style="width:100%"&gt;
  &lt;tr&gt;
&lt;td style="background-color:white; border: 0px;"&gt;&lt;a href="http://youtu.be/X9ddBrbFAWU?list=UUg8BPyZL30zyCIz1jJVAL1A"&gt;&lt;img class="alignnone size-medium wp-image-71" 
src="http://gpilab.com/images/Screen-Shot-2014-10-10-at-2.53.17-PM-300x225.png" alt="Screen Shot 2014-10-10 at 2.53.17 PM" width="300" height="224" /&gt;&lt;br&gt;QuickStart&lt;/a&gt;&lt;/td&gt;

&lt;td style="background-color:white; border: 0px;"&gt;&lt;a href="http://youtu.be/XKCml0Z_HD4?list=UUg8BPyZL30zyCIz1jJVAL1A"&gt;&lt;img class="alignnone size-medium wp-image-68" src="http://gpilab.com/images/Screen-Shot-2014-10-10-at-2.49.17-PM-300x224.png" alt="Screen Shot 2014-10-10 at 2.49.17 PM" width="300" height="224" /&gt;&lt;br&gt;Module 1.1: Cross Sections&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;  
  &lt;tr&gt;
&lt;td style="background-color:white; border: 0px;"&gt;&lt;a href="http://youtu.be/AL7FPOPCcfY?list=UUg8BPyZL30zyCIz1jJVAL1A"&gt;&lt;img class="alignnone size-medium wp-image-69" src="http://gpilab.com/images/Screen-Shot-2014-10-10-at-2.51.10-PM-300x224.png" alt="Screen Shot 2014-10-10 at 2.51.10 PM" width="300" height="224" /&gt;&lt;br&gt;Module 1.2: k-Space Filter&lt;/a&gt;&lt;/td&gt;

&lt;td style="background-color:white; border: 0px;"&gt;&lt;a href="http://youtu.be/6nUXaXlP4Ss?list=UUg8BPyZL30zyCIz1jJVAL1A"&gt;&lt;img class="alignnone size-medium wp-image-70" src="http://gpilab.com/images/Screen-Shot-2014-10-10-at-2.52.18-PM-300x224.png" alt="Screen Shot 2014-10-10 at 2.52.18 PM" width="300" height="224" /&gt;&lt;br&gt;Module 1.3: SoS Coil Combine&lt;/a&gt;&lt;/td&gt;
  &lt;/tr&gt;
&lt;/table&gt;</content><category term="posts"></category></entry><entry><title>Whats New in Version 0.2</title><link href="http://gpilab.com/2014/09/whats-new-in-version-02/" rel="alternate"></link><published>2014-09-29T21:42:00-07:00</published><updated>2014-09-29T21:42:00-07:00</updated><author><name>Nicholas Zwart</name></author><id>tag:gpilab.com,2014-09-29:/2014/09/whats-new-in-version-02/</id><summary type="html">&lt;p&gt;This release is available in native packages for OSX and Linux as well as a
Linux virtual machine. The package is built upon the multi-platform Python
distribution “Anaconda”, from Continuum Analytics. The packages also contains
an installer for maximum convenience.&lt;/p&gt;
&lt;p&gt;The OSX package has been tested on 10.8 and …&lt;/p&gt;</summary><content type="html">&lt;p&gt;This release is available in native packages for OSX and Linux as well as a
Linux virtual machine. The package is built upon the multi-platform Python
distribution “Anaconda”, from Continuum Analytics. The packages also contains
an installer for maximum convenience.&lt;/p&gt;
&lt;p&gt;The OSX package has been tested on 10.8 and 10.9. The OSX package comes with an
app launcher that allows OS file associations to be made for GPI. File
associations that GPI understands by default are .png, .jpg, .csv, .hdf5,
.data, .list, .raw, .npy, .lab, .par, .rec, .pickle and .sin.&lt;/p&gt;
&lt;p&gt;The Linux package has been tested on Ubuntu 12.04, 13.04 and 13.10. GPI on
13.10 requires XFCE or KDE desktop managers for faithful GUI display. The Linux
VM uses Ubuntu 12.04.&lt;/p&gt;
&lt;p&gt;Several packaged libraries have been updated including numpy, scipy, and
matplotlib. Pyopencl has been included in the OSX package.&lt;/p&gt;
&lt;h2&gt;GUI Updates&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;The status bar now contains the canvas walltime and total port memory held by
  the canvas.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://gpilab.com/images/walltime1-300x39.jpg"&gt;&lt;img
class="size-medium wp-image-55"
src="http://gpilab.com/images/walltime1-300x39.jpg"
alt="More canvas info." width="500" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;More canvas info.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Multi-drag-n-drop is now supported by the canvas. This includes network
  files, associated files, and GPI node descriptions.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;A “percent-done” graphic is shown next to long running nodes. This is
  currently available as an estimate based on previous runtimes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://gpilab.com/images/pdone-300x1161.jpg"&gt;&lt;img
class="size-full wp-image-54"
src="http://gpilab.com/images/pdone-300x1161.jpg"
alt="Percent done." width="300" height="116" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Percent done.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Data sharing between GPI processes has been threaded to prevent the GUI from
  locking up on large data sets.&lt;/li&gt;
&lt;li&gt;Node menus now have a corner grip (arguably one of the most important updates
  in Aughty) and a “Close-all” feature located in the main menu.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://gpilab.com/images/grip-300x1951.jpg"&gt;&lt;img
class="size-full wp-image-53"
src="http://gpilab.com/images/grip-300x1951.jpg" alt="The
corner grip." width="300" height="195" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The corner grip.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://gpilab.com/images/closeall-300x49.jpg"&gt;&lt;img
class="size-full wp-image-50"
src="http://gpilab.com/images/closeall-300x49.jpg"
alt="Close all menu option." width="350" /&gt;&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;Close all menu option.&lt;/p&gt;
&lt;h2&gt;Commandline Interface&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The commandline interface allows GPI to run as a scriptable element in a
  batch process.&lt;/li&gt;
&lt;li&gt;String arguments can be passed to String nodes allowing networks to be
  parameterized with filenames, directories, numbers and anything passable via
  a string.&lt;/li&gt;
&lt;li&gt;Multiple networks, nodes, and associated files can be passed as commandline
  arguments for quick workspace loading.&lt;/li&gt;
&lt;li&gt;The log level can also be pre-set using this interface. &lt;code&gt;Config File (.gpirc)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;A configuration file in the user’s home directory can be used to set
  node-library paths, file associations and configure the gpi_make.&lt;/li&gt;
&lt;li&gt;Library paths set in this file will also be included in the gpi_make for
  cross-library-linking and include file resolution.
    &lt;i&gt;2-Level Library Scope&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;Libraries are now 2-levels allowing developers to have their own library and
  use sub-library names that alias the ‘core’ packaged library.&lt;/li&gt;
&lt;li&gt;Nodes are now searched for by scope allowing multiple nodes to have the same
  name.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;a href="http://gpilab.com/images/library-300x186.jpg"&gt;&lt;img
class="size-full wp-image-51"
src="http://gpilab.com/images/library-300x186.jpg"
alt="2-level library scope." width="400" /&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;2-level library scope.&lt;/p&gt;
&lt;h2&gt;Network File Upgrade (v2)&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The network files now save information about node and canvas timing, machine
  specs and the new library scope.&lt;/li&gt;
&lt;li&gt;The new format is mostly backwards compatible with pre-v2 networks (provided
  that all the nodes are also included in the library path).&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;PyFI&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;The Python Function Interface code has been updated with a new Array package
  (similar to the R2 arrays). This packages provides slightly faster indexing,
  and index range check mode (for debugging), stacktraces and a simple FFTW
  interface.&lt;/li&gt;
&lt;li&gt;A PyCallable interface object has also been added for embedding Python calls
  in C++. This provides a simple interface for calling functions that may not
  yet be available in the C++ interface, but allow the developer to leverage
  the vast Python library. Included interfaces are Numpy::pinv() (pseudo
  inverse), Numpy::printArray(), Numpy::fft1() as examples of how this may be
  used.&lt;/li&gt;
&lt;li&gt;Error messages now demangle the variable types, for easier error
  interpretation.&lt;/li&gt;
&lt;li&gt;Support for C++ templated functions -providing a way of making typed
  functions available to Python.&lt;/li&gt;
&lt;li&gt;Updated PyFI macros further reduce the amount of code needed to define a
  PyMOD. &lt;i&gt;NodeAPI&lt;/i&gt;&lt;/li&gt;
&lt;li&gt;Support for initUI() return codes.&lt;/li&gt;
&lt;li&gt;New event API that keeps all events that initiated execution. Added
  deprecations warnings to the old interface.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Nodes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;All ‘core’ PyMODs have been updated to use the new PyFI::Array class.&lt;/li&gt;
&lt;li&gt;ReadPhilips now supports a lab/raw/sin reader, xml/par/rec (with HIFU bug
  fixes), noise and phase correction outputs and an updated display that
  includes labels for dimensions.&lt;/li&gt;
&lt;li&gt;The ‘mathematics’ library has been renamed to ‘math’.&lt;/li&gt;
&lt;li&gt;Elem_Math node has been renamed to Math.&lt;/li&gt;
&lt;li&gt;Added ReadImage &amp;amp; WriteImage for .png or .jpg.&lt;/li&gt;
&lt;li&gt;Added DataQuery for looking through data arrays.&lt;/li&gt;
&lt;li&gt;Added ImageCompare &amp;amp; ImageRate for performing paired comparisons.&lt;/li&gt;
&lt;li&gt;Updated DictionQuery to use a search key.&lt;/li&gt;
&lt;li&gt;Added ReadCSV &amp;amp; WriteCSV for ascii, comma separated values.&lt;/li&gt;
&lt;li&gt;Added ReadHDF5 &amp;amp; WriteHDF5 (still basic, under development).&lt;/li&gt;
&lt;li&gt;Added ReadPhysioLog for scanner physiologic sensor recordings.&lt;/li&gt;
&lt;li&gt;Added DegridDFT for trajectory data simulation.&lt;/li&gt;
&lt;li&gt;Added Alert for making a noise when a process has finished.&lt;/li&gt;
&lt;li&gt;Added AutoNum in place of IntegerLoop (does float, int, and has a better UI).&lt;/li&gt;
&lt;li&gt;Compare (find scale RMS diff between two NPY arrays).&lt;/li&gt;
&lt;li&gt;Updated Dimensions to handle events.&lt;/li&gt;
&lt;li&gt;Updated the ToComplex UI.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;Bugfixes&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Networks correctly save widget-port connections.&lt;/li&gt;
&lt;li&gt;Corrected getWidget() error message (the bug threw exception during the error
  message creation) when using methods like getAttr() or setAttr().&lt;/li&gt;
&lt;li&gt;Better node-process stability: fixed an issue causing zombie processes.&lt;/li&gt;
&lt;/ul&gt;</content><category term="posts"></category></entry></feed>